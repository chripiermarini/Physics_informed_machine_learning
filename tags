!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AdaIN	neuraloperator/neuralop/layers/fno_block.py	/^from .normalization_layers import AdaIN$/;"	i
AdaIN	neuraloperator/neuralop/layers/normalization_layers.py	/^class AdaIN(nn.Module):$/;"	c
Any	neuraloperator/neuralop/mpu/mappings.py	/^from typing import Any$/;"	i
ArgparseConfig	neuraloperator/scripts/hpo/tune_darcy.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ArgparseConfig	neuraloperator/scripts/test_from_config.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ArgparseConfig	neuraloperator/scripts/train_burgers.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ArgparseConfig	neuraloperator/scripts/train_darcy.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ArgparseConfig	neuraloperator/scripts/train_navier_stokes.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
AttentionKernelIntegral	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^class AttentionKernelIntegral(torch.nn.Module):$/;"	c
AttentionKernelIntegral	neuraloperator/neuralop/layers/tests/test_attention_layer.py	/^from ..attention_kernel_integral import AttentionKernelIntegral$/;"	i
BUILDDIR	neuraloperator/doc/Makefile	/^BUILDDIR      = build$/;"	m
BUILDDIR	neuraloperator/doc/make.bat	/^set BUILDDIR=build$/;"	v
BaseModel	neuraloperator/neuralop/models/base_model.py	/^class BaseModel(torch.nn.Module):$/;"	c
BaseModel	neuraloperator/neuralop/models/fno.py	/^from .base_model import BaseModel$/;"	i
BaseModel	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from neuralop.models.base_model import BaseModel$/;"	i
BaseProblem	problems/problem_base.py	/^class BaseProblem:$/;"	c
BaseSpectralConv	neuraloperator/neuralop/layers/base_spectral_conv.py	/^class BaseSpectralConv(nn.Module):$/;"	c
BaseSpectralConv	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from .base_spectral_conv import BaseSpectralConv$/;"	i
BaseSpectralConv	neuraloperator/neuralop/layers/spectral_convolution.py	/^from .base_spectral_conv import BaseSpectralConv$/;"	i
BaseSpectralConv	neuraloperator/neuralop/layers/spherical_convolution.py	/^from .base_spectral_conv import BaseSpectralConv$/;"	i
BasicLoggerCallback	neuraloperator/neuralop/training/__init__.py	/^from .callbacks import (Callback, BasicLoggerCallback,$/;"	i
BasicLoggerCallback	neuraloperator/neuralop/training/callbacks.py	/^class BasicLoggerCallback(Callback):$/;"	c
BasicLoggerCallback	neuraloperator/scripts/train_burgers.py	/^from neuralop.training import setup, BasicLoggerCallback$/;"	i
BasicLoggerCallback	neuraloperator/scripts/train_darcy.py	/^from neuralop.training.callbacks import BasicLoggerCallback$/;"	i
BasicLoggerCallback	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop.training import setup, BasicLoggerCallback$/;"	i
Bunch	neuraloperator/neuralop/models/tests/test_fno.py	/^from configmypy import Bunch$/;"	i
BurgersEqnLoss	neuraloperator/neuralop/__init__.py	/^from .losses import LpLoss, H1Loss, BurgersEqnLoss, ICLoss, WeightedSumLoss$/;"	i
BurgersEqnLoss	neuraloperator/neuralop/losses/__init__.py	/^from .equation_losses import BurgersEqnLoss, ICLoss$/;"	i
BurgersEqnLoss	neuraloperator/neuralop/losses/equation_losses.py	/^class BurgersEqnLoss(object):$/;"	c
BurgersEqnLoss	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
Callback	neuraloperator/neuralop/training/__init__.py	/^from .callbacks import (Callback, BasicLoggerCallback,$/;"	i
Callback	neuraloperator/neuralop/training/callbacks.py	/^class Callback(object):$/;"	c
CheckpointCallback	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop.training import CheckpointCallback$/;"	i
CheckpointCallback	neuraloperator/neuralop/__init__.py	/^from .training import Trainer, CheckpointCallback$/;"	i
CheckpointCallback	neuraloperator/neuralop/training/callbacks.py	/^class CheckpointCallback(Callback):$/;"	c
CheckpointCallback	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from neuralop import Trainer, LpLoss, H1Loss, CheckpointCallback$/;"	i
Composite	neuraloperator/neuralop/datasets/transforms.py	/^class Composite(Transform):$/;"	c
ConfigPipeline	neuraloperator/neuralop/tests/test_model_from_config.py	/^from configmypy import ConfigPipeline, YamlConfig$/;"	i
ConfigPipeline	neuraloperator/scripts/hpo/tune_darcy.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ConfigPipeline	neuraloperator/scripts/test_from_config.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ConfigPipeline	neuraloperator/scripts/train_burgers.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ConfigPipeline	neuraloperator/scripts/train_darcy.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ConfigPipeline	neuraloperator/scripts/train_navier_stokes.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
DDP	neuraloperator/scripts/hpo/tune_darcy.py	/^from torch.nn.parallel import DistributedDataParallel as DDP$/;"	i
DDP	neuraloperator/scripts/train_burgers.py	/^from torch.nn.parallel import DistributedDataParallel as DDP$/;"	i
DDP	neuraloperator/scripts/train_darcy.py	/^from torch.nn.parallel import DistributedDataParallel as DDP$/;"	i
DDP	neuraloperator/scripts/train_navier_stokes.py	/^from torch.nn.parallel import DistributedDataParallel as DDP$/;"	i
Darcy	problems/problem_darcy.py	/^class Darcy:$/;"	c
DarcyMatrix	problems/problem_darcy_matrix.py	/^class DarcyMatrix:$/;"	c
DataLoader	neuraloperator/neuralop/datasets/spherical_swe.py	/^from torch.utils.data import DataLoader$/;"	i
DataLoader	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from torch.utils.data import Dataset, DataLoader$/;"	i
Dataset	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^from torch.utils.data import Dataset$/;"	i
Dataset	neuraloperator/neuralop/datasets/tensor_dataset.py	/^from torch.utils.data.dataset import Dataset$/;"	i
Dataset	neuraloperator/neuralop/datasets/transforms.py	/^from torch.utils.data import Dataset$/;"	i
Dataset	neuraloperator/neuralop/datasets/zarr_dataset.py	/^from torch.utils.data import Dataset$/;"	i
Dataset	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from torch.utils.data import Dataset, DataLoader$/;"	i
DefaultDataProcessor	neuraloperator/neuralop/datasets/darcy.py	/^from .data_transforms import DefaultDataProcessor$/;"	i
DefaultDataProcessor	neuraloperator/neuralop/datasets/data_transforms.py	/^class DefaultDataProcessor(torch.nn.Module):$/;"	c
DefaultDataProcessor	neuraloperator/neuralop/datasets/navier_stokes.py	/^from .data_transforms import DefaultDataProcessor$/;"	i
DefaultDataProcessor	neuraloperator/neuralop/datasets/tests/test_data_processor.py	/^from ..data_transforms import DefaultDataProcessor$/;"	i
DictTransform	neuraloperator/neuralop/datasets/output_encoder.py	/^class DictTransform(Transform):$/;"	c
DomainPadding	neuraloperator/neuralop/layers/padding.py	/^class DomainPadding(nn.Module):$/;"	c
DomainPadding	neuraloperator/neuralop/layers/tests/test_padding.py	/^from ..padding import DomainPadding$/;"	i
DomainPadding	neuraloperator/neuralop/models/fno.py	/^from ..layers.padding import DomainPadding$/;"	i
DomainPadding	neuraloperator/neuralop/models/uno.py	/^from ..layers.padding import DomainPadding$/;"	i
DummyDataset	neuraloperator/neuralop/training/tests/test_callbacks.py	/^class DummyDataset(Dataset):$/;"	c
DummyModel	neuraloperator/neuralop/training/tests/test_callbacks.py	/^class DummyModel(BaseModel, name='Dummy'):$/;"	c
DumyModel	neuraloperator/neuralop/tests/test_utils.py	/^    class DumyModel(nn.Module):$/;"	c	function:test_count_model_params
F	neuraloperator/neuralop/layers/fno_block.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/layers/integral_transform.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/layers/mlp.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/layers/padding.py	/^from torch.nn import functional as F$/;"	i
F	neuraloperator/neuralop/layers/resample.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/losses/equation_losses.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/models/fno.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/models/fnogno.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/models/uno.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/neuralop/mpu/helpers.py	/^import torch.nn.functional as F$/;"	i
F	neuraloperator/scripts/train_burgers.py	/^import torch.nn.functional as F$/;"	i
FCLegendre	neuraloperator/neuralop/layers/fourier_continuation.py	/^class FCLegendre(nn.Module):$/;"	c
FNO	FNO dataset.py	/^from neuralop.models import FNO$/;"	i
FNO	FNO script.py	/^from neuralop.models import FNO$/;"	i
FNO	neuraloperator/neuralop/models/__init__.py	/^from .fno import FNO, FNO1d, FNO2d, FNO3d$/;"	i
FNO	neuraloperator/neuralop/models/fno.py	/^class FNO(BaseModel, name='FNO'):$/;"	c
FNO	neuraloperator/neuralop/models/fnogno.py	/^from .fno import FNO$/;"	i
FNO	neuraloperator/neuralop/models/tests/test_fno.py	/^from neuralop.models import FNO$/;"	i
FNO	nn_architecture.py	/^from neuralop.models import FNO$/;"	i
FNO1d	neuraloperator/neuralop/models/__init__.py	/^from .fno import FNO, FNO1d, FNO2d, FNO3d$/;"	i
FNO1d	neuraloperator/neuralop/models/fno.py	/^class FNO1d(FNO):$/;"	c
FNO2d	neuraloperator/neuralop/models/__init__.py	/^from .fno import FNO, FNO1d, FNO2d, FNO3d$/;"	i
FNO2d	neuraloperator/neuralop/models/fno.py	/^class FNO2d(FNO):$/;"	c
FNO3d	neuraloperator/neuralop/models/__init__.py	/^from .fno import FNO, FNO1d, FNO2d, FNO3d$/;"	i
FNO3d	neuraloperator/neuralop/models/fno.py	/^class FNO3d(FNO):$/;"	c
FNOBlocks	neuraloperator/neuralop/layers/fno_block.py	/^class FNOBlocks(nn.Module):$/;"	c
FNOBlocks	neuraloperator/neuralop/layers/tests/test_fno_block.py	/^from ..fno_block import FNOBlocks$/;"	i
FNOBlocks	neuraloperator/neuralop/models/fno.py	/^from ..layers.fno_block import FNOBlocks$/;"	i
FNOBlocks	neuraloperator/neuralop/models/uno.py	/^from ..layers.fno_block import FNOBlocks$/;"	i
FNOGNO	neuraloperator/neuralop/models/fnogno.py	/^class FNOGNO(nn.Module):$/;"	c
FNOGNO	neuraloperator/neuralop/models/tests/test_fnogno.py	/^from ..fnogno import FNOGNO$/;"	i
FNOLocal	nn_architecture.py	/^class FNOLocal(nn.Module):$/;"	c
FactorizedTensor	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from tltorch.factorized_tensors.core import FactorizedTensor$/;"	i
FactorizedTensor	neuraloperator/neuralop/layers/spectral_convolution.py	/^from tltorch.factorized_tensors.core import FactorizedTensor$/;"	i
FactorizedTensor	neuraloperator/neuralop/layers/spherical_convolution.py	/^from tltorch.factorized_tensors.core import FactorizedTensor$/;"	i
FactorizedTensor	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^from tltorch import FactorizedTensor$/;"	i
FactorizedTensor	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^from tltorch import FactorizedTensor$/;"	i
FactorizedTensor	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^from tltorch import FactorizedTensor$/;"	i
FieldwiseAggregatorLoss	neuraloperator/neuralop/losses/meta_losses.py	/^class FieldwiseAggregatorLoss(object):$/;"	c
FixedRadiusSearch	neuraloperator/neuralop/layers/neighbor_search.py	/^            from open3d.ml.torch.layers import FixedRadiusSearch$/;"	i
GeneralTensorDataset	neuraloperator/neuralop/datasets/pt_dataset.py	/^from .tensor_dataset import GeneralTensorDataset$/;"	i
GeneralTensorDataset	neuraloperator/neuralop/datasets/tensor_dataset.py	/^class GeneralTensorDataset(Dataset):$/;"	c
H1Loss	FNO script.py	/^from neuralop import LpLoss, H1Loss$/;"	i
H1Loss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop import LpLoss, H1Loss$/;"	i
H1Loss	neuraloperator/examples/plot_FNO_darcy.py	/^from neuralop import LpLoss, H1Loss$/;"	i
H1Loss	neuraloperator/examples/plot_SFNO_swe.py	/^from neuralop import LpLoss, H1Loss$/;"	i
H1Loss	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop import LpLoss, H1Loss$/;"	i
H1Loss	neuraloperator/neuralop/__init__.py	/^from .losses import LpLoss, H1Loss, BurgersEqnLoss, ICLoss, WeightedSumLoss$/;"	i
H1Loss	neuraloperator/neuralop/losses/__init__.py	/^from .data_losses import LpLoss, H1Loss$/;"	i
H1Loss	neuraloperator/neuralop/losses/data_losses.py	/^class H1Loss(object):$/;"	c
H1Loss	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from neuralop import Trainer, LpLoss, H1Loss, CheckpointCallback$/;"	i
H1Loss	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
H1Loss	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
H1Loss	neuraloperator/scripts/train_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
H1Loss	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
H5pyDataset	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^class H5pyDataset(Dataset):$/;"	c
ICLoss	neuraloperator/neuralop/__init__.py	/^from .losses import LpLoss, H1Loss, BurgersEqnLoss, ICLoss, WeightedSumLoss$/;"	i
ICLoss	neuraloperator/neuralop/losses/__init__.py	/^from .equation_losses import BurgersEqnLoss, ICLoss$/;"	i
ICLoss	neuraloperator/neuralop/losses/equation_losses.py	/^class ICLoss(object):$/;"	c
ICLoss	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
IntegralTransform	neuraloperator/neuralop/layers/integral_transform.py	/^class IntegralTransform(nn.Module):$/;"	c
IntegralTransform	neuraloperator/neuralop/models/fnogno.py	/^from ..layers.integral_transform import IntegralTransform$/;"	i
InverseRealSHT	neuraloperator/neuralop/layers/spherical_convolution.py	/^from torch_harmonics import RealSHT, InverseRealSHT$/;"	i
IregularLpqLoss	neuraloperator/neuralop/losses/data_losses.py	/^class IregularLpqLoss(torch.nn.Module):$/;"	c
Iterable	neuraloperator/neuralop/datasets/output_encoder.py	/^from collections.abc import Iterable$/;"	i
Legendre	neuraloperator/neuralop/layers/fourier_continuation.py	/^from numpy.polynomial.legendre import Legendre$/;"	i
List	neuraloperator/neuralop/datasets/transforms.py	/^from typing import List$/;"	i
List	neuraloperator/neuralop/layers/fno_block.py	/^from typing import List, Optional, Union$/;"	i
List	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
List	neuraloperator/neuralop/layers/padding.py	/^from typing import List, Union$/;"	i
List	neuraloperator/neuralop/layers/spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
List	neuraloperator/neuralop/layers/spherical_convolution.py	/^from typing import List, Optional, Union$/;"	i
List	neuraloperator/neuralop/losses/data_losses.py	/^from typing import List$/;"	i
List	neuraloperator/neuralop/training/callbacks.py	/^from typing import List, Union, Literal$/;"	i
List	neuraloperator/neuralop/utils.py	/^from typing import List, Optional, Union$/;"	i
Literal	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    from typing import Literal$/;"	i
Literal	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    from typing_extensions import Literal$/;"	i
Literal	neuraloperator/neuralop/layers/segment_csr.py	/^from typing import Literal$/;"	i
Literal	neuraloperator/neuralop/training/callbacks.py	/^from typing import List, Union, Literal$/;"	i
LpLoss	FNO script.py	/^from neuralop import LpLoss, H1Loss$/;"	i
LpLoss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop import LpLoss, H1Loss$/;"	i
LpLoss	neuraloperator/examples/plot_FNO_darcy.py	/^from neuralop import LpLoss, H1Loss$/;"	i
LpLoss	neuraloperator/examples/plot_SFNO_swe.py	/^from neuralop import LpLoss, H1Loss$/;"	i
LpLoss	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop import LpLoss, H1Loss$/;"	i
LpLoss	neuraloperator/neuralop/__init__.py	/^from .losses import LpLoss, H1Loss, BurgersEqnLoss, ICLoss, WeightedSumLoss$/;"	i
LpLoss	neuraloperator/neuralop/losses/__init__.py	/^from .data_losses import LpLoss, H1Loss$/;"	i
LpLoss	neuraloperator/neuralop/losses/data_losses.py	/^class LpLoss(object):$/;"	c
LpLoss	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from neuralop import Trainer, LpLoss, H1Loss, CheckpointCallback$/;"	i
LpLoss	neuraloperator/neuralop/training/trainer.py	/^from neuralop.losses import LpLoss$/;"	i
LpLoss	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
LpLoss	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
LpLoss	neuraloperator/scripts/train_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
LpLoss	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
MGPTensorDataset	neuraloperator/neuralop/datasets/transforms.py	/^class MGPTensorDataset(Dataset):$/;"	c
MGPatchingCallback	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop.training.callbacks import MGPatchingCallback, SimpleWandBLoggerCallback$/;"	i
MGPatchingDataProcessor	neuraloperator/neuralop/datasets/data_transforms.py	/^class MGPatchingDataProcessor(torch.nn.Module):$/;"	c
MGPatchingDataProcessor	neuraloperator/scripts/train_burgers.py	/^from neuralop.datasets.data_transforms import MGPatchingDataProcessor$/;"	i
MGPatchingDataProcessor	neuraloperator/scripts/train_darcy.py	/^from neuralop.datasets.data_transforms import MGPatchingDataProcessor$/;"	i
MGPatchingDataProcessor	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop.datasets.data_transforms import MGPatchingDataProcessor$/;"	i
MGPatchingTransform	neuraloperator/neuralop/datasets/transforms.py	/^class MGPatchingTransform(Transform):$/;"	c
MLP	neuraloperator/neuralop/layers/fno_block.py	/^from .mlp import MLP$/;"	i
MLP	neuraloperator/neuralop/layers/mlp.py	/^class MLP(nn.Module):$/;"	c
MLP	neuraloperator/neuralop/models/fno.py	/^from ..layers.mlp import MLP$/;"	i
MLP	neuraloperator/neuralop/models/fnogno.py	/^from ..layers.mlp import MLP$/;"	i
MLP	neuraloperator/neuralop/models/uno.py	/^from ..layers.mlp import MLP$/;"	i
MLPLinear	neuraloperator/neuralop/layers/integral_transform.py	/^from .mlp import MLPLinear$/;"	i
MLPLinear	neuraloperator/neuralop/layers/mlp.py	/^class MLPLinear(torch.nn.Module):$/;"	c
MPI	neuraloperator/neuralop/mpu/comm.py	/^        from mpi4py import MPI$/;"	i
MultigridPatching2D	neuraloperator/neuralop/datasets/data_transforms.py	/^from neuralop.training.patching import MultigridPatching2D$/;"	i
MultigridPatching2D	neuraloperator/neuralop/datasets/transforms.py	/^from neuralop.training.patching import MultigridPatching2D$/;"	i
MultigridPatching2D	neuraloperator/neuralop/training/patching.py	/^class MultigridPatching2D(nn.Module):$/;"	c
MultipleFieldOutputEncoder	neuraloperator/neuralop/datasets/output_encoder.py	/^class MultipleFieldOutputEncoder(OutputEncoder):$/;"	c
NeighborSearch	neuraloperator/neuralop/layers/neighbor_search.py	/^class NeighborSearch(nn.Module):$/;"	c
NeighborSearch	neuraloperator/neuralop/models/fnogno.py	/^from ..layers.neighbor_search import NeighborSearch$/;"	i
Normalizer	neuraloperator/neuralop/datasets/transforms.py	/^class Normalizer():$/;"	c
Number	neuraloperator/neuralop/layers/fno_block.py	/^Number = Union[int, float]$/;"	v
Number	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^Number = Union[int, float]$/;"	v
Number	neuraloperator/neuralop/layers/spectral_convolution.py	/^Number = Union[int, float]$/;"	v
Number	neuraloperator/neuralop/layers/spherical_convolution.py	/^Number = Union[int, float]$/;"	v
Number	neuraloperator/neuralop/utils.py	/^Number = Union[float, int]$/;"	v
OneHiddenLayerFCNN	nn_architecture.py	/^class OneHiddenLayerFCNN(nn.Module):$/;"	c
Optimizer	stochasticsqp.py	/^from torch.optim.optimizer import Optimizer, required$/;"	i
Optional	neuraloperator/neuralop/layers/fno_block.py	/^from typing import List, Optional, Union$/;"	i
Optional	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
Optional	neuraloperator/neuralop/layers/spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
Optional	neuraloperator/neuralop/layers/spherical_convolution.py	/^from typing import List, Optional, Union$/;"	i
Optional	neuraloperator/neuralop/utils.py	/^from typing import List, Optional, Union$/;"	i
OutputEncoder	neuraloperator/neuralop/datasets/output_encoder.py	/^class OutputEncoder(torch.nn.Module):$/;"	c
Path	neuraloperator/neuralop/datasets/burgers.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/datasets/darcy.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/datasets/navier_stokes.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/models/base_model.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/tests/test_model_from_config.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/tests/test_utils.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/training/callbacks.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/neuralop/training/training_state.py	/^from pathlib import Path$/;"	i
Path	neuraloperator/setup.py	/^from pathlib import Path$/;"	i
PipelineCallback	neuraloperator/neuralop/training/callbacks.py	/^class PipelineCallback(Callback):$/;"	c
PipelineCallback	neuraloperator/neuralop/training/trainer.py	/^from .callbacks import PipelineCallback$/;"	i
PositionalEmbedding	neuraloperator/neuralop/layers/embeddings.py	/^class PositionalEmbedding(nn.Module):$/;"	c
PositionalEmbedding	neuraloperator/neuralop/models/fnogno.py	/^from ..layers.embeddings import PositionalEmbedding$/;"	i
PositionalEmbedding2D	neuraloperator/neuralop/datasets/darcy.py	/^from .transforms import PositionalEmbedding2D$/;"	i
PositionalEmbedding2D	neuraloperator/neuralop/datasets/navier_stokes.py	/^from .transforms import PositionalEmbedding2D$/;"	i
PositionalEmbedding2D	neuraloperator/neuralop/datasets/pt_dataset.py	/^from .transforms import PositionalEmbedding2D$/;"	i
PositionalEmbedding2D	neuraloperator/neuralop/datasets/tests/test_data_processor.py	/^from ..transforms import PositionalEmbedding2D$/;"	i
PositionalEmbedding2D	neuraloperator/neuralop/datasets/transforms.py	/^class PositionalEmbedding2D():$/;"	c
Q	Test file.py	/^Q = 3*a**3 - b**2$/;"	v
Q	Test file.py	/^Q = 3*a1**3 - b1**2$/;"	v
README	neuraloperator/setup.py	/^README = readme(root_path)$/;"	v
RandomMGPatch	neuraloperator/neuralop/datasets/transforms.py	/^class RandomMGPatch():$/;"	c
Re	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^Re = 5000$/;"	v
RealSHT	neuraloperator/neuralop/layers/spherical_convolution.py	/^from torch_harmonics import RealSHT, InverseRealSHT$/;"	i
ResNet18_Weights	Test file.py	/^from torchvision.models import resnet18, ResNet18_Weights$/;"	i
RotaryEmbedding	neuraloperator/neuralop/layers/embeddings.py	/^class RotaryEmbedding(nn.Module):$/;"	c
RotaryEmbedding	neuraloperator/neuralop/layers/tests/test_attention_layer.py	/^from ..embeddings import RotaryEmbedding$/;"	i
SFNO	neuraloperator/examples/plot_SFNO_swe.py	/^from neuralop.models import SFNO$/;"	i
SFNO	neuraloperator/neuralop/models/__init__.py	/^from .fno import SFNO$/;"	i
SFNO	neuraloperator/neuralop/models/fno.py	/^SFNO = partialclass("SFNO", FNO, factorization="dense", SpectralConv=SphericalConv)$/;"	v
SHT	neuraloperator/neuralop/layers/spherical_convolution.py	/^class SHT(nn.Module):$/;"	c
SHT	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^from ..spherical_convolution import SHT$/;"	i
SOURCEDIR	neuraloperator/doc/Makefile	/^SOURCEDIR     = source$/;"	m
SOURCEDIR	neuraloperator/doc/make.bat	/^set SOURCEDIR=source$/;"	v
SPHINXBUILD	neuraloperator/doc/Makefile	/^SPHINXBUILD   ?= sphinx-build$/;"	m
SPHINXBUILD	neuraloperator/doc/make.bat	/^	set SPHINXBUILD=sphinx-build$/;"	v
SPHINXOPTS	neuraloperator/doc/Makefile	/^SPHINXOPTS    ?=$/;"	m
ShallowWaterSolver	neuraloperator/neuralop/datasets/spherical_swe.py	/^from torch_harmonics.examples import ShallowWaterSolver$/;"	i
SimpleWandBLoggerCallback	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop.training.callbacks import MGPatchingCallback, SimpleWandBLoggerCallback$/;"	i
SoftGating	neuraloperator/neuralop/layers/skip_connections.py	/^class SoftGating(nn.Module):$/;"	c
SpectralConv	neuraloperator/neuralop/layers/fno_block.py	/^from .spectral_convolution import SpectralConv$/;"	i
SpectralConv	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^class SpectralConv(BaseSpectralConv):$/;"	c
SpectralConv	neuraloperator/neuralop/layers/spectral_convolution.py	/^class SpectralConv(BaseSpectralConv):$/;"	c
SpectralConv	neuraloperator/neuralop/models/fno.py	/^from ..layers.spectral_convolution import SpectralConv$/;"	i
SpectralConv	neuraloperator/neuralop/models/fnogno.py	/^from ..layers.spectral_convolution import SpectralConv$/;"	i
SpectralConv	neuraloperator/neuralop/models/uno.py	/^from ..layers.spectral_convolution import SpectralConv$/;"	i
SpectralConv1d	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^class SpectralConv1d(SpectralConv):$/;"	c
SpectralConv1d	neuraloperator/neuralop/layers/spectral_convolution.py	/^class SpectralConv1d(SpectralConv):$/;"	c
SpectralConv2d	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^class SpectralConv2d(SpectralConv):$/;"	c
SpectralConv2d	neuraloperator/neuralop/layers/spectral_convolution.py	/^class SpectralConv2d(SpectralConv):$/;"	c
SpectralConv2d	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^from ..legacy_spectral_convolution import (SpectralConv3d, SpectralConv2d,$/;"	i
SpectralConv2d	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^from ..spectral_convolution import (SpectralConv3d, SpectralConv2d,$/;"	i
SpectralConv3d	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^class SpectralConv3d(SpectralConv):$/;"	c
SpectralConv3d	neuraloperator/neuralop/layers/spectral_convolution.py	/^class SpectralConv3d(SpectralConv):$/;"	c
SpectralConv3d	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^from ..legacy_spectral_convolution import (SpectralConv3d, SpectralConv2d,$/;"	i
SpectralConv3d	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^from ..spectral_convolution import (SpectralConv3d, SpectralConv2d,$/;"	i
SphericalConv	neuraloperator/neuralop/layers/spherical_convolution.py	/^class SphericalConv(BaseSpectralConv):$/;"	c
SphericalConv	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^from ..spherical_convolution import SphericalConv$/;"	i
SphericalConv	neuraloperator/neuralop/models/fno.py	/^from ..layers.spherical_convolution import SphericalConv$/;"	i
SphericalSWEDataset	neuraloperator/neuralop/datasets/spherical_swe.py	/^class SphericalSWEDataset(torch.utils.data.Dataset):$/;"	c
Spring	problems/problem_spring.py	/^class Spring:$/;"	c
StochasticSQP	stochasticsqp.py	/^class StochasticSQP(Optimizer):$/;"	c
SubConv	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^class SubConv(nn.Module):$/;"	c
SubConv	neuraloperator/neuralop/layers/spectral_convolution.py	/^class SubConv(nn.Module):$/;"	c
SubConv	neuraloperator/neuralop/layers/spherical_convolution.py	/^from .spectral_convolution import SubConv$/;"	i
SubModule	neuraloperator/neuralop/layers/fno_block.py	/^class SubModule(nn.Module):$/;"	c
T	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^T = 100$/;"	v
T	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^T = 500 # number of time steps$/;"	v
TFNO	FNO script.py	/^from neuralop.models import TFNO$/;"	i
TFNO	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop.models import TFNO$/;"	i
TFNO	neuraloperator/examples/plot_FNO_darcy.py	/^from neuralop.models import TFNO$/;"	i
TFNO	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop.models import TFNO, UNO$/;"	i
TFNO	neuraloperator/neuralop/__init__.py	/^from .models import TFNO3d, TFNO2d, TFNO1d, TFNO$/;"	i
TFNO	neuraloperator/neuralop/models/__init__.py	/^from .fno import TFNO, TFNO1d, TFNO2d, TFNO3d$/;"	i
TFNO	neuraloperator/neuralop/models/fno.py	/^TFNO = partialclass("TFNO", FNO, factorization="Tucker")$/;"	v
TFNO	neuraloperator/neuralop/models/tests/test_fno.py	/^from neuralop import TFNO$/;"	i
TFNO1d	neuraloperator/neuralop/__init__.py	/^from .models import TFNO3d, TFNO2d, TFNO1d, TFNO$/;"	i
TFNO1d	neuraloperator/neuralop/models/__init__.py	/^from .fno import TFNO, TFNO1d, TFNO2d, TFNO3d$/;"	i
TFNO1d	neuraloperator/neuralop/models/fno.py	/^TFNO1d = partialclass("TFNO1d", FNO1d, factorization="Tucker")$/;"	v
TFNO2d	neuraloperator/neuralop/__init__.py	/^from .models import TFNO3d, TFNO2d, TFNO1d, TFNO$/;"	i
TFNO2d	neuraloperator/neuralop/models/__init__.py	/^from .fno import TFNO, TFNO1d, TFNO2d, TFNO3d$/;"	i
TFNO2d	neuraloperator/neuralop/models/fno.py	/^TFNO2d = partialclass("TFNO2d", FNO2d, factorization="Tucker")$/;"	v
TFNO3d	neuraloperator/neuralop/__init__.py	/^from .models import TFNO3d, TFNO2d, TFNO1d, TFNO$/;"	i
TFNO3d	neuraloperator/neuralop/models/__init__.py	/^from .fno import TFNO, TFNO1d, TFNO2d, TFNO3d$/;"	i
TFNO3d	neuraloperator/neuralop/models/fno.py	/^TFNO3d = partialclass("TFNO3d", FNO3d, factorization="Tucker")$/;"	v
TensorDataset	neuraloperator/neuralop/datasets/burgers.py	/^from .tensor_dataset import TensorDataset$/;"	i
TensorDataset	neuraloperator/neuralop/datasets/darcy.py	/^from .tensor_dataset import TensorDataset$/;"	i
TensorDataset	neuraloperator/neuralop/datasets/navier_stokes.py	/^from .tensor_dataset import TensorDataset$/;"	i
TensorDataset	neuraloperator/neuralop/datasets/tensor_dataset.py	/^class TensorDataset(Dataset):$/;"	c
Trainer	FNO script.py	/^from neuralop import Trainer$/;"	i
Trainer	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop import Trainer$/;"	i
Trainer	neuraloperator/examples/plot_FNO_darcy.py	/^from neuralop import Trainer$/;"	i
Trainer	neuraloperator/examples/plot_SFNO_swe.py	/^from neuralop import Trainer$/;"	i
Trainer	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop import Trainer$/;"	i
Trainer	neuraloperator/neuralop/__init__.py	/^from .training import Trainer, CheckpointCallback$/;"	i
Trainer	neuraloperator/neuralop/training/__init__.py	/^from .trainer import Trainer$/;"	i
Trainer	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from neuralop import Trainer, LpLoss, H1Loss, CheckpointCallback$/;"	i
Trainer	neuraloperator/neuralop/training/trainer.py	/^class Trainer:$/;"	c
Trainer	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
Trainer	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
Trainer	neuraloperator/scripts/train_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
Trainer	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
Transform	neuraloperator/neuralop/datasets/output_encoder.py	/^from .transforms import Transform$/;"	i
Transform	neuraloperator/neuralop/datasets/transforms.py	/^class Transform(torch.nn.Module):$/;"	c
Tuple	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
Tuple	neuraloperator/neuralop/layers/spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
TwoHiddenLayerFCNN	nn_architecture.py	/^class TwoHiddenLayerFCNN(nn.Module):$/;"	c
UNO	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop.models import TFNO, UNO$/;"	i
UNO	neuraloperator/neuralop/models/__init__.py	/^from .uno import UNO$/;"	i
UNO	neuraloperator/neuralop/models/tests/test_uno.py	/^from ..uno import UNO$/;"	i
UNO	neuraloperator/neuralop/models/uno.py	/^class UNO(nn.Module):$/;"	c
Union	neuraloperator/neuralop/layers/fno_block.py	/^from typing import List, Optional, Union$/;"	i
Union	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
Union	neuraloperator/neuralop/layers/padding.py	/^from typing import List, Union$/;"	i
Union	neuraloperator/neuralop/layers/spectral_convolution.py	/^from typing import List, Optional, Tuple, Union$/;"	i
Union	neuraloperator/neuralop/layers/spherical_convolution.py	/^from typing import List, Optional, Union$/;"	i
Union	neuraloperator/neuralop/training/callbacks.py	/^from typing import List, Union, Literal$/;"	i
Union	neuraloperator/neuralop/training/training_state.py	/^from typing import Union$/;"	i
Union	neuraloperator/neuralop/utils.py	/^from typing import List, Optional, Union$/;"	i
UnitGaussianNormalizer	neuraloperator/neuralop/datasets/darcy.py	/^from .output_encoder import UnitGaussianNormalizer$/;"	i
UnitGaussianNormalizer	neuraloperator/neuralop/datasets/navier_stokes.py	/^from .output_encoder import UnitGaussianNormalizer$/;"	i
UnitGaussianNormalizer	neuraloperator/neuralop/datasets/output_encoder.py	/^class UnitGaussianNormalizer(Transform):$/;"	c
UnitGaussianNormalizer	neuraloperator/neuralop/datasets/pt_dataset.py	/^from ..utils import UnitGaussianNormalizer$/;"	i
UnitGaussianNormalizer	neuraloperator/neuralop/datasets/tests/test_data_processor.py	/^from ..output_encoder import UnitGaussianNormalizer$/;"	i
UnitGaussianNormalizer	neuraloperator/neuralop/datasets/tests/test_output_encoder.py	/^from ..output_encoder import UnitGaussianNormalizer$/;"	i
UnitGaussianNormalizer	neuraloperator/neuralop/utils.py	/^class UnitGaussianNormalizer:$/;"	c
VERSION	neuraloperator/setup.py	/^VERSION = version(root_path)$/;"	v
Variable	problems/problem_base.py	/^from torch.autograd import Variable$/;"	i
Variable	problems/problem_darcy.py	/^from torch.autograd import Variable$/;"	i
Variable	problems/problem_darcy_matrix.py	/^from torch.autograd import Variable$/;"	i
Variable	problems/problem_spring.py	/^from torch.autograd import Variable$/;"	i
WeightedL2DragLoss	neuraloperator/neuralop/losses/data_losses.py	/^class WeightedL2DragLoss(object):$/;"	c
WeightedSumLoss	neuraloperator/neuralop/__init__.py	/^from .losses import LpLoss, H1Loss, BurgersEqnLoss, ICLoss, WeightedSumLoss$/;"	i
WeightedSumLoss	neuraloperator/neuralop/losses/__init__.py	/^from .meta_losses import WeightedSumLoss/;"	i
WeightedSumLoss	neuraloperator/neuralop/losses/meta_losses.py	/^class WeightedSumLoss(object):$/;"	c
WeightedSumLoss	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
YamlConfig	neuraloperator/neuralop/tests/test_model_from_config.py	/^from configmypy import ConfigPipeline, YamlConfig$/;"	i
YamlConfig	neuraloperator/scripts/hpo/tune_darcy.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
YamlConfig	neuraloperator/scripts/test_from_config.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
YamlConfig	neuraloperator/scripts/train_burgers.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
YamlConfig	neuraloperator/scripts/train_darcy.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
YamlConfig	neuraloperator/scripts/train_navier_stokes.py	/^from configmypy import ConfigPipeline, YamlConfig, ArgparseConfig$/;"	i
ZarrDataset	neuraloperator/neuralop/datasets/zarr_dataset.py	/^class ZarrDataset(Dataset):$/;"	c
_CopyToModelParallelRegion	neuraloperator/neuralop/mpu/mappings.py	/^class _CopyToModelParallelRegion(torch.autograd.Function):$/;"	c
_DATA_PARALLEL_GROUP	neuraloperator/neuralop/mpu/comm.py	/^_DATA_PARALLEL_GROUP = None$/;"	v
_GatherFromModelParallelRegion	neuraloperator/neuralop/mpu/mappings.py	/^class _GatherFromModelParallelRegion(torch.autograd.Function):$/;"	c
_MODEL_PARALLEL_GROUP	neuraloperator/neuralop/mpu/comm.py	/^_MODEL_PARALLEL_GROUP = None$/;"	v
_ReduceFromModelParallelRegion	neuraloperator/neuralop/mpu/mappings.py	/^class _ReduceFromModelParallelRegion(torch.autograd.Function):$/;"	c
_ScatterToModelParallelRegion	neuraloperator/neuralop/mpu/mappings.py	/^class _ScatterToModelParallelRegion(torch.autograd.Function):$/;"	c
__call__	neuraloperator/neuralop/datasets/transforms.py	/^    def __call__(self, data):$/;"	m	class:Normalizer	file:
__call__	neuraloperator/neuralop/datasets/transforms.py	/^    def __call__(self, data):$/;"	m	class:RandomMGPatch	file:
__call__	neuraloperator/neuralop/datasets/transforms.py	/^    def __call__(self, data, batched=True):$/;"	m	class:PositionalEmbedding2D	file:
__call__	neuraloperator/neuralop/losses/data_losses.py	/^    def __call__(self, y_pred, y, **kwargs):$/;"	m	class:LpLoss	file:
__call__	neuraloperator/neuralop/losses/data_losses.py	/^    def __call__(self, y_pred, y, h=None, **kwargs):$/;"	m	class:H1Loss	file:
__call__	neuraloperator/neuralop/losses/data_losses.py	/^    def __call__(self, y_pred, y, vol_elm, inward_normals, flow_normals, flow_speed, reference_area, **kwargs):$/;"	m	class:WeightedL2DragLoss	file:
__call__	neuraloperator/neuralop/losses/equation_losses.py	/^    def __call__(self, y_pred, **kwargs):$/;"	m	class:BurgersEqnLoss	file:
__call__	neuraloperator/neuralop/losses/equation_losses.py	/^    def __call__(self, y_pred, x, **kwargs):$/;"	m	class:ICLoss	file:
__call__	neuraloperator/neuralop/losses/meta_losses.py	/^    def __call__(self, *args, **kwargs):$/;"	m	class:WeightedSumLoss	file:
__call__	neuraloperator/neuralop/losses/meta_losses.py	/^    def __call__(self, pred: torch.Tensor, truth: torch.Tensor, **kwargs):$/;"	m	class:FieldwiseAggregatorLoss	file:
__enter__	neuraloperator/neuralop/mpu/comm.py	/^    def __enter__(self):$/;"	m	class:disable_logging	file:
__exit__	neuraloperator/neuralop/mpu/comm.py	/^    def __exit__(self, type, value, traceback):$/;"	m	class:disable_logging	file:
__getitem__	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^    def __getitem__(self, idx):$/;"	m	class:H5pyDataset	file:
__getitem__	neuraloperator/neuralop/datasets/spherical_swe.py	/^    def __getitem__(self, index):$/;"	m	class:SphericalSWEDataset	file:
__getitem__	neuraloperator/neuralop/datasets/tensor_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:GeneralTensorDataset	file:
__getitem__	neuraloperator/neuralop/datasets/tensor_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:TensorDataset	file:
__getitem__	neuraloperator/neuralop/datasets/transforms.py	/^    def __getitem__(self, index):$/;"	m	class:MGPTensorDataset	file:
__getitem__	neuraloperator/neuralop/datasets/zarr_dataset.py	/^    def __getitem__(self, idx):$/;"	m	class:ZarrDataset	file:
__getitem__	neuraloperator/neuralop/layers/fno_block.py	/^    def __getitem__(self, indices):$/;"	m	class:FNOBlocks	file:
__getitem__	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def __getitem__(self, indices):$/;"	m	class:SpectralConv	file:
__getitem__	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def __getitem__(self, indices):$/;"	m	class:SpectralConv	file:
__getitem__	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def __getitem__(self, indices):$/;"	m	class:SphericalConv	file:
__getitem__	neuraloperator/neuralop/training/tests/test_callbacks.py	/^    def __getitem__(self, idx):$/;"	m	class:DummyDataset	file:
__getitems__	neuraloperator/neuralop/datasets/zarr_dataset.py	/^    def __getitems__(self, idx):$/;"	m	class:ZarrDataset	file:
__init__	neuraloperator/neuralop/datasets/data_transforms.py	/^    def __init__(self, $/;"	m	class:DefaultDataProcessor
__init__	neuraloperator/neuralop/datasets/data_transforms.py	/^    def __init__(self, model: torch.nn.Module, levels: int, $/;"	m	class:MGPatchingDataProcessor
__init__	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^    def __init__($/;"	m	class:H5pyDataset
__init__	neuraloperator/neuralop/datasets/output_encoder.py	/^    def __init__(self):$/;"	m	class:OutputEncoder
__init__	neuraloperator/neuralop/datasets/output_encoder.py	/^    def __init__(self, encoder_dict, input_mappings, return_mappings=None):$/;"	m	class:MultipleFieldOutputEncoder
__init__	neuraloperator/neuralop/datasets/output_encoder.py	/^    def __init__(self, mean=None, std=None, eps=1e-7, dim=None, mask=None):$/;"	m	class:UnitGaussianNormalizer
__init__	neuraloperator/neuralop/datasets/output_encoder.py	/^    def __init__(self, transform_dict, input_mappings, return_mappings=None):$/;"	m	class:DictTransform
__init__	neuraloperator/neuralop/datasets/spherical_swe.py	/^    def __init__(self, dt=3600, dims=(256, 512), initial_condition='random', num_examples=32,$/;"	m	class:SphericalSWEDataset
__init__	neuraloperator/neuralop/datasets/tensor_dataset.py	/^    def __init__(self, sets, transforms):$/;"	m	class:GeneralTensorDataset
__init__	neuraloperator/neuralop/datasets/tensor_dataset.py	/^    def __init__(self, x, y, transform_x=None, transform_y=None):$/;"	m	class:TensorDataset
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self):$/;"	m	class:Transform
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self, grid_boundaries=[[0, 1], [0, 1]]):$/;"	m	class:PositionalEmbedding2D
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self, levels=2):$/;"	m	class:RandomMGPatch
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self, mean, std, eps=1e-6):$/;"	m	class:Normalizer
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self, model: torch.nn.Module, levels: int, $/;"	m	class:MGPatchingTransform
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self, transforms: List[Transform]):$/;"	m	class:Composite
__init__	neuraloperator/neuralop/datasets/transforms.py	/^    def __init__(self, x, y, levels=2):$/;"	m	class:MGPTensorDataset
__init__	neuraloperator/neuralop/datasets/zarr_dataset.py	/^    def __init__($/;"	m	class:ZarrDataset
__init__	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^    def __init__(self,$/;"	m	class:AttentionKernelIntegral
__init__	neuraloperator/neuralop/layers/base_spectral_conv.py	/^    def __init__(self, device=None, dtype=None):$/;"	m	class:BaseSpectralConv
__init__	neuraloperator/neuralop/layers/embeddings.py	/^    def __init__(self, dim, min_freq=1\/64, scale=1.):$/;"	m	class:RotaryEmbedding
__init__	neuraloperator/neuralop/layers/embeddings.py	/^    def __init__(self, num_channels, max_positions=10000, endpoint=False):$/;"	m	class:PositionalEmbedding
__init__	neuraloperator/neuralop/layers/fno_block.py	/^    def __init__($/;"	m	class:FNOBlocks
__init__	neuraloperator/neuralop/layers/fno_block.py	/^    def __init__(self, main_module, indices):$/;"	m	class:SubModule
__init__	neuraloperator/neuralop/layers/fourier_continuation.py	/^    def __init__(self, n, d, dtype=torch.float32):$/;"	m	class:FCLegendre
__init__	neuraloperator/neuralop/layers/integral_transform.py	/^    def __init__($/;"	m	class:IntegralTransform
__init__	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def __init__($/;"	m	class:SpectralConv
__init__	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def __init__(self, main_conv, indices):$/;"	m	class:SubConv
__init__	neuraloperator/neuralop/layers/mlp.py	/^    def __init__($/;"	m	class:MLP
__init__	neuraloperator/neuralop/layers/mlp.py	/^    def __init__(self, layers, non_linearity=F.gelu, dropout=0.0):$/;"	m	class:MLPLinear
__init__	neuraloperator/neuralop/layers/neighbor_search.py	/^    def __init__(self, use_open3d=True, use_torch_cluster=False):$/;"	m	class:NeighborSearch
__init__	neuraloperator/neuralop/layers/normalization_layers.py	/^    def __init__(self, embed_dim, in_channels, mlp=None, eps=1e-5):$/;"	m	class:AdaIN
__init__	neuraloperator/neuralop/layers/padding.py	/^    def __init__($/;"	m	class:DomainPadding
__init__	neuraloperator/neuralop/layers/skip_connections.py	/^    def __init__(self, in_features, out_features=None, n_dim=2, bias=False):$/;"	m	class:SoftGating
__init__	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def __init__($/;"	m	class:SpectralConv
__init__	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def __init__(self, main_conv, indices):$/;"	m	class:SubConv
__init__	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def __init__($/;"	m	class:SphericalConv
__init__	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def __init__(self, dtype=torch.float32, device=None):$/;"	m	class:SHT
__init__	neuraloperator/neuralop/losses/data_losses.py	/^    def __init__(self, d=1, L=2*math.pi, reduce_dims=0, reductions='sum', fix_x_bnd=False, fix_y_bnd=False, fix_z_bnd=False):$/;"	m	class:H1Loss
__init__	neuraloperator/neuralop/losses/data_losses.py	/^    def __init__(self, d=1, p=2, L=2*math.pi, reduce_dims=0, reductions='sum'):$/;"	m	class:LpLoss
__init__	neuraloperator/neuralop/losses/data_losses.py	/^    def __init__(self, mappings: dict, device: str = 'cuda'):$/;"	m	class:WeightedL2DragLoss
__init__	neuraloperator/neuralop/losses/data_losses.py	/^    def __init__(self, p=2.0, q=2.0):$/;"	m	class:IregularLpqLoss
__init__	neuraloperator/neuralop/losses/equation_losses.py	/^    def __init__(self, loss=F.mse_loss):$/;"	m	class:ICLoss
__init__	neuraloperator/neuralop/losses/equation_losses.py	/^    def __init__(self, visc=0.01, method="fdm", loss=F.mse_loss, domain_length=1.0):$/;"	m	class:BurgersEqnLoss
__init__	neuraloperator/neuralop/losses/meta_losses.py	/^    def __init__(self, losses, weights=None):$/;"	m	class:WeightedSumLoss
__init__	neuraloperator/neuralop/losses/meta_losses.py	/^    def __init__(self, losses: dict, mappings: dict, logging=False):$/;"	m	class:FieldwiseAggregatorLoss
__init__	neuraloperator/neuralop/models/fno.py	/^    def __init__($/;"	m	class:FNO
__init__	neuraloperator/neuralop/models/fno.py	/^    def __init__($/;"	m	class:FNO1d
__init__	neuraloperator/neuralop/models/fno.py	/^    def __init__($/;"	m	class:FNO2d
__init__	neuraloperator/neuralop/models/fno.py	/^    def __init__($/;"	m	class:FNO3d
__init__	neuraloperator/neuralop/models/fnogno.py	/^    def __init__($/;"	m	class:FNOGNO
__init__	neuraloperator/neuralop/models/uno.py	/^    def __init__($/;"	m	class:UNO
__init__	neuraloperator/neuralop/mpu/comm.py	/^    def __init__(self, level=logging.ERROR):$/;"	m	class:disable_logging
__init__	neuraloperator/neuralop/tests/test_utils.py	/^        def __init__(self, n_submodels=0, dtype=torch.float32):$/;"	m	class:test_count_model_params.DumyModel
__init__	neuraloperator/neuralop/training/callbacks.py	/^    def __init__(self):$/;"	m	class:Callback
__init__	neuraloperator/neuralop/training/callbacks.py	/^    def __init__(self, $/;"	m	class:CheckpointCallback
__init__	neuraloperator/neuralop/training/callbacks.py	/^    def __init__(self, callbacks: List[Callback]):$/;"	m	class:PipelineCallback
__init__	neuraloperator/neuralop/training/callbacks.py	/^    def __init__(self, wandb_kwargs=None):$/;"	m	class:BasicLoggerCallback
__init__	neuraloperator/neuralop/training/patching.py	/^    def __init__($/;"	m	class:MultigridPatching2D
__init__	neuraloperator/neuralop/training/tests/test_callbacks.py	/^    def __init__(self, features, **kwargs):$/;"	m	class:DummyModel
__init__	neuraloperator/neuralop/training/tests/test_callbacks.py	/^    def __init__(self, n_examples):$/;"	m	class:DummyDataset
__init__	neuraloperator/neuralop/training/trainer.py	/^    def __init__(self, *, $/;"	m	class:Trainer
__init__	neuraloperator/neuralop/utils.py	/^    def __init__(self, x, eps=0.00001, reduce_dim=[0], verbose=True):$/;"	m	class:UnitGaussianNormalizer
__init__	nn_architecture.py	/^    def __init__(self, n_discretize=16, hidden_channels=16):$/;"	m	class:FNOLocal
__init__	nn_architecture.py	/^    def __init__(self, n_input, n_output, n_neurons=1024):$/;"	m	class:OneHiddenLayerFCNN
__init__	nn_architecture.py	/^    def __init__(self, n_input, n_output, n_neurons=16):$/;"	m	class:TwoHiddenLayerFCNN
__init__	problems/problem_base.py	/^    def __init__(self, device, n_obj_sample, n_constrs):$/;"	m	class:BaseProblem
__init__	problems/problem_darcy.py	/^    def __init__(self, device, n_obj_sample=500, n_constrs=10):$/;"	m	class:Darcy
__init__	problems/problem_darcy_matrix.py	/^    def __init__(self, device, n_obj_sample=500, n_constrs=10, n_test_sample=1):$/;"	m	class:DarcyMatrix
__init__	problems/problem_spring.py	/^    def __init__(self, device, n_obj_sample = 500, n_constrs = 10):$/;"	m	class:Spring
__init__	stochasticsqp.py	/^    def __init__(self, params, lr=required, $/;"	m	class:StochasticSQP
__init_subclass__	neuraloperator/neuralop/models/base_model.py	/^    def __init_subclass__(cls, name=None, **kwargs):$/;"	m	class:BaseModel	file:
__len__	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^    def __len__(self):$/;"	m	class:H5pyDataset	file:
__len__	neuraloperator/neuralop/datasets/spherical_swe.py	/^    def __len__(self):$/;"	m	class:SphericalSWEDataset	file:
__len__	neuraloperator/neuralop/datasets/tensor_dataset.py	/^    def __len__(self):$/;"	m	class:GeneralTensorDataset	file:
__len__	neuraloperator/neuralop/datasets/tensor_dataset.py	/^    def __len__(self):$/;"	m	class:TensorDataset	file:
__len__	neuraloperator/neuralop/datasets/transforms.py	/^    def __len__(self):$/;"	m	class:MGPTensorDataset	file:
__len__	neuraloperator/neuralop/datasets/zarr_dataset.py	/^    def __len__(self):$/;"	m	class:ZarrDataset	file:
__len__	neuraloperator/neuralop/training/tests/test_callbacks.py	/^    def __len__(self):$/;"	m	class:DummyDataset	file:
__new__	neuraloperator/neuralop/models/base_model.py	/^    def __new__(cls, *args, **kwargs):$/;"	m	class:BaseModel	file:
__setstate__	stochasticsqp.py	/^    def __setstate__(self, state):$/;"	m	class:StochasticSQP	file:
__str__	neuraloperator/neuralop/losses/meta_losses.py	/^    def __str__(self):$/;"	m	class:WeightedSumLoss	file:
__version__	neuraloperator/neuralop/__init__.py	/^__version__ = '0.3.0'$/;"	v
_attribute	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^    def _attribute(self, variable, name):$/;"	m	class:H5pyDataset
_contract_cp	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^def _contract_cp(x, cp_weight, separable=False):$/;"	f
_contract_cp	neuraloperator/neuralop/layers/spectral_convolution.py	/^def _contract_cp(x, cp_weight, separable=False):$/;"	f
_contract_cp	neuraloperator/neuralop/layers/spherical_convolution.py	/^def _contract_cp(x, cp_weight, separable=False, dhconv=True):$/;"	f
_contract_dense	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^def _contract_dense(x, weight, separable=False):$/;"	f
_contract_dense	neuraloperator/neuralop/layers/spectral_convolution.py	/^def _contract_dense(x, weight, separable=False):$/;"	f
_contract_dense	neuraloperator/neuralop/layers/spherical_convolution.py	/^def _contract_dense(x, weight, separable=False, dhconv=True):$/;"	f
_contract_dense_separable	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^def _contract_dense_separable(x, weight, separable=True):$/;"	f
_contract_dense_separable	neuraloperator/neuralop/layers/spectral_convolution.py	/^def _contract_dense_separable(x, weight, separable=True):$/;"	f
_contract_dense_separable	neuraloperator/neuralop/layers/spherical_convolution.py	/^def _contract_dense_separable(x, weight, separable=True, dhconv=False):$/;"	f
_contract_tt	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^def _contract_tt(x, tt_weight, separable=False):$/;"	f
_contract_tt	neuraloperator/neuralop/layers/spectral_convolution.py	/^def _contract_tt(x, tt_weight, separable=False):$/;"	f
_contract_tt	neuraloperator/neuralop/layers/spherical_convolution.py	/^def _contract_tt(x, tt_weight, separable=False, dhconv=False):$/;"	f
_contract_tucker	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^def _contract_tucker(x, tucker_weight, separable=False):$/;"	f
_contract_tucker	neuraloperator/neuralop/layers/spectral_convolution.py	/^def _contract_tucker(x, tucker_weight, separable=False):$/;"	f
_contract_tucker	neuraloperator/neuralop/layers/spherical_convolution.py	/^def _contract_tucker(x, tucker_weight, separable=False, dhconv=False):$/;"	f
_flatten_dense_tensors	neuraloperator/neuralop/mpu/mappings.py	/^from torch._utils import _flatten_dense_tensors, _unflatten_dense_tensors$/;"	i
_gather	neuraloperator/neuralop/mpu/helpers.py	/^def _gather(input_, dim_, group=None):$/;"	f
_gather	neuraloperator/neuralop/mpu/mappings.py	/^from .helpers import _gather$/;"	i
_get_patches	neuraloperator/neuralop/datasets/transforms.py	/^        def _get_patches(shifted_image, step, height, width):$/;"	f	function:RandomMGPatch.__call__
_get_sample	neuraloperator/neuralop/datasets/spherical_swe.py	/^    def _get_sample(self):$/;"	m	class:SphericalSWEDataset
_get_weight	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def _get_weight(self, index):$/;"	m	class:SpectralConv
_get_weight	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def _get_weight(self, index):$/;"	m	class:SpectralConv
_get_weight	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def _get_weight(self, index):$/;"	m	class:SphericalConv
_load_navier_stokes_test_HR	neuraloperator/neuralop/datasets/navier_stokes.py	/^def _load_navier_stokes_test_HR(data_path, n_test, resolution=256,$/;"	f
_make_mg_patches	neuraloperator/neuralop/training/patching.py	/^    def _make_mg_patches(self, x):$/;"	m	class:MultigridPatching2D
_models	neuraloperator/neuralop/models/base_model.py	/^    _models = dict()$/;"	v	class:BaseModel
_reduce	neuraloperator/neuralop/mpu/helpers.py	/^def _reduce(input_, use_fp32=True, group=None):$/;"	f
_reduce	neuraloperator/neuralop/mpu/mappings.py	/^from .helpers import _reduce$/;"	i
_split	neuraloperator/neuralop/mpu/helpers.py	/^def _split(input_, dim_, group=None):$/;"	f
_split	neuraloperator/neuralop/mpu/mappings.py	/^from .helpers import _split$/;"	i
_stitch	neuraloperator/neuralop/training/patching.py	/^    def _stitch(self, x):$/;"	m	class:MultigridPatching2D
_transpose	neuraloperator/neuralop/mpu/helpers.py	/^def _transpose(tensor, dim0, dim1, group=None, async_op=False):$/;"	f
_unflatten_dense_tensors	neuraloperator/neuralop/mpu/mappings.py	/^from torch._utils import _flatten_dense_tensors, _unflatten_dense_tensors$/;"	i
_unpad	neuraloperator/neuralop/training/patching.py	/^    def _unpad(self, x):$/;"	m	class:MultigridPatching2D
_update_state_dict	neuraloperator/neuralop/training/callbacks.py	/^    def _update_state_dict(self, **kwargs):$/;"	m	class:Callback
_update_state_dict	neuraloperator/neuralop/training/callbacks.py	/^    def _update_state_dict(self, **kwargs):$/;"	m	class:PipelineCallback
_version	neuraloperator/neuralop/models/base_model.py	/^    _version = '0.1.0'$/;"	v	class:BaseModel
a	Test file.py	/^a = torch.tensor([2., 3.], requires_grad=True).reshape(-1,1)$/;"	v
a1	Test file.py	/^a1 = variables[:,0].clone().detach().requires_grad_(True).reshape(-1,1)$/;"	v
abs	neuraloperator/neuralop/losses/data_losses.py	/^    def abs(self, x, y, h=None):$/;"	m	class:H1Loss
abs	neuraloperator/neuralop/losses/data_losses.py	/^    def abs(self, x, y, h=None):$/;"	m	class:LpLoss
abs	neuraloperator/neuralop/losses/data_losses.py	/^    def abs(self, x, y, vol_elm):$/;"	m	class:IregularLpqLoss
abstractmethod	neuraloperator/neuralop/datasets/output_encoder.py	/^from abc import abstractmethod$/;"	i
abstractmethod	neuraloperator/neuralop/datasets/transforms.py	/^from abc import abstractmethod$/;"	i
all_problems	solve.py	/^all_problems = import_all_classes_from_directory(directory_path)$/;"	v
amp	neuraloperator/neuralop/training/trainer.py	/^from torch.cuda import amp$/;"	i
amp_autocast	neuraloperator/scripts/train_burgers.py	/^    amp_autocast=config.opt.amp_autocast,$/;"	v
amp_autocast	neuraloperator/scripts/train_darcy.py	/^    amp_autocast=config.opt.amp_autocast,$/;"	v
amp_autocast	neuraloperator/scripts/train_navier_stokes.py	/^    amp_autocast=config.opt.amp_autocast,$/;"	v
apply_1d_rotary_pos_emb	neuraloperator/neuralop/layers/embeddings.py	/^    def apply_1d_rotary_pos_emb(t, freqs):$/;"	m	class:RotaryEmbedding
apply_2d_rotary_pos_emb	neuraloperator/neuralop/layers/embeddings.py	/^    def apply_2d_rotary_pos_emb(t, freqs_x, freqs_y):$/;"	m	class:RotaryEmbedding
apply_rotary_pos_emb	neuraloperator/neuralop/layers/embeddings.py	/^def apply_rotary_pos_emb(t, freqs):$/;"	f
assert_close	neuraloperator/neuralop/datasets/tests/test_data_processor.py	/^from torch.testing import assert_close$/;"	i
assert_close	neuraloperator/neuralop/datasets/tests/test_output_encoder.py	/^from torch.testing import assert_close$/;"	i
attrs	neuraloperator/neuralop/datasets/zarr_dataset.py	/^    def attrs(self, array_name, name):$/;"	m	class:ZarrDataset
author	neuraloperator/doc/source/conf.py	/^author = 'Jean Kossaifi, Nikola Kovachki, Zongyi Li and Anima Anandkumar'$/;"	v
autodoc_default_flags	neuraloperator/doc/source/conf.py	/^autodoc_default_flags = ['members']$/;"	v
autodoc_member_order	neuraloperator/doc/source/conf.py	/^autodoc_member_order = 'bysource'$/;"	v
autosummary_generate	neuraloperator/doc/source/conf.py	/^autosummary_generate = True$/;"	v
available_models	neuraloperator/neuralop/models/base_model.py	/^def available_models():$/;"	f
ax	FNO script.py	/^    ax = fig.add_subplot(3, 3, index*3 + 1)$/;"	v
ax	FNO script.py	/^    ax = fig.add_subplot(3, 3, index*3 + 2)$/;"	v
ax	FNO script.py	/^    ax = fig.add_subplot(3, 3, index*3 + 3)$/;"	v
ax	neuraloperator/examples/plot_FNO_darcy.py	/^    ax = fig.add_subplot(3, 3, index*3 + 1)$/;"	v
ax	neuraloperator/examples/plot_FNO_darcy.py	/^    ax = fig.add_subplot(3, 3, index*3 + 2)$/;"	v
ax	neuraloperator/examples/plot_FNO_darcy.py	/^    ax = fig.add_subplot(3, 3, index*3 + 3)$/;"	v
ax	neuraloperator/examples/plot_SFNO_swe.py	/^    ax = fig.add_subplot(2, 3, index*3 + 1)$/;"	v
ax	neuraloperator/examples/plot_SFNO_swe.py	/^    ax = fig.add_subplot(2, 3, index*3 + 2)$/;"	v
ax	neuraloperator/examples/plot_SFNO_swe.py	/^    ax = fig.add_subplot(2, 3, index*3 + 3)$/;"	v
ax	neuraloperator/examples/plot_UNO_darcy.py	/^    ax = fig.add_subplot(3, 3, index*3 + 1)$/;"	v
ax	neuraloperator/examples/plot_UNO_darcy.py	/^    ax = fig.add_subplot(3, 3, index*3 + 2)$/;"	v
ax	neuraloperator/examples/plot_UNO_darcy.py	/^    ax = fig.add_subplot(3, 3, index*3 + 3)$/;"	v
ax	neuraloperator/examples/plot_darcy_flow.py	/^ax = fig.add_subplot(2, 2, 1)$/;"	v
ax	neuraloperator/examples/plot_darcy_flow.py	/^ax = fig.add_subplot(2, 2, 2)$/;"	v
ax	neuraloperator/examples/plot_darcy_flow.py	/^ax = fig.add_subplot(2, 2, 3)$/;"	v
ax	neuraloperator/examples/plot_darcy_flow.py	/^ax = fig.add_subplot(2, 2, 4)$/;"	v
b	Test file.py	/^b = torch.tensor([1., 5.], requires_grad=True).reshape(-1,1)$/;"	v
b1	Test file.py	/^b1 = variables[:,1].clone().detach().requires_grad_(True).reshape(-1,1)$/;"	v
backward	neuraloperator/neuralop/mpu/mappings.py	/^    def backward(ctx, grad_output):$/;"	m	class:_CopyToModelParallelRegion
backward	neuraloperator/neuralop/mpu/mappings.py	/^    def backward(ctx, grad_output):$/;"	m	class:_GatherFromModelParallelRegion
backward	neuraloperator/neuralop/mpu/mappings.py	/^    def backward(ctx, grad_output):$/;"	m	class:_ReduceFromModelParallelRegion
backward	neuraloperator/neuralop/mpu/mappings.py	/^    def backward(ctx, grad_output):$/;"	m	class:_ScatterToModelParallelRegion
batch	neuraloperator/examples/plot_darcy_flow.py	/^    batch = next(iter(test_loader))$/;"	v
batch_size	neuraloperator/neuralop/datasets/darcy.py	/^            batch_size=test_batch_size,$/;"	v
batch_size	neuraloperator/neuralop/datasets/darcy.py	/^        batch_size=batch_size,$/;"	v
batch_size	neuraloperator/neuralop/datasets/darcy.py	/^        batch_size=test_batch_size,$/;"	v
batch_size	neuraloperator/scripts/hpo/tune_darcy.py	/^    batch_size=config.data.batch_size,$/;"	v
batch_size	neuraloperator/scripts/test_from_config.py	/^batch_size = config.data.batch_size$/;"	v
batch_size	neuraloperator/scripts/train_darcy.py	/^    batch_size=config.data.batch_size,$/;"	v
batch_size	neuraloperator/scripts/train_navier_stokes.py	/^    batch_size=config.data.batch_size,$/;"	v
buffer	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^buffer = 10 # just add a buffer to the plot$/;"	v
buffer	stochasticsqp.py	/^    buffer=1e-5$/;"	v	class:StochasticSQP
callbacks	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  callbacks=[$/;"	v
callbacks	neuraloperator/scripts/train_burgers.py	/^    callbacks=callbacks,$/;"	v
callbacks	neuraloperator/scripts/train_burgers.py	/^callbacks = [$/;"	v
callbacks	neuraloperator/scripts/train_darcy.py	/^    callbacks=[$/;"	v
callbacks	neuraloperator/scripts/train_navier_stokes.py	/^    callbacks=callbacks,$/;"	v
callbacks	neuraloperator/scripts/train_navier_stokes.py	/^callbacks = [$/;"	v
ceil	neuraloperator/neuralop/datasets/spherical_swe.py	/^from math import ceil, floor$/;"	i
central_diff_1d	neuraloperator/neuralop/losses/data_losses.py	/^def central_diff_1d(x, h, fix_x_bnd=False):$/;"	f
central_diff_2d	neuraloperator/neuralop/losses/data_losses.py	/^def central_diff_2d(x, h, fix_x_bnd=False, fix_y_bnd=False):$/;"	f
central_diff_2d	neuraloperator/neuralop/losses/equation_losses.py	/^from .data_losses import central_diff_2d$/;"	i
central_diff_3d	neuraloperator/neuralop/losses/data_losses.py	/^def central_diff_3d(x, h, fix_x_bnd=False, fix_y_bnd=False, fix_z_bnd=False):$/;"	f
channel_dim	neuraloperator/neuralop/datasets/darcy.py	/^        channel_dim=channel_dim,$/;"	v
comm	neuraloperator/neuralop/training/patching.py	/^import neuralop.mpu.comm as comm$/;"	i
comm	neuraloperator/neuralop/training/torch_setup.py	/^import neuralop.mpu.comm as comm$/;"	i
comm	neuraloperator/neuralop/training/trainer.py	/^import neuralop.mpu.comm as comm$/;"	i
compute_extension_matrix	neuraloperator/neuralop/layers/fourier_continuation.py	/^    def compute_extension_matrix(self, n, d):$/;"	m	class:FCLegendre
compute_terms	neuraloperator/neuralop/losses/data_losses.py	/^    def compute_terms(self, x, y, h):$/;"	m	class:H1Loss
compute_training_loss	neuraloperator/neuralop/training/callbacks.py	/^    def compute_training_loss(self, *args, **kwargs):$/;"	m	class:Callback
compute_training_loss	neuraloperator/neuralop/training/callbacks.py	/^    def compute_training_loss(self, *args, **kwargs):$/;"	m	class:PipelineCallback
compute_val_loss	neuraloperator/neuralop/training/callbacks.py	/^    def compute_val_loss(self, *args, **kwargs):$/;"	m	class:Callback
compute_val_loss	neuraloperator/neuralop/training/callbacks.py	/^    def compute_val_loss(self, *args, **kwargs):$/;"	m	class:PipelineCallback
config	neuraloperator/scripts/hpo/tune_darcy.py	/^        config=config,$/;"	v
config	neuraloperator/scripts/hpo/tune_darcy.py	/^config = pipe.read_conf()$/;"	v
config	neuraloperator/scripts/test_from_config.py	/^config = pipe.read_conf()$/;"	v
config	neuraloperator/scripts/train_burgers.py	/^        config=config,$/;"	v
config	neuraloperator/scripts/train_burgers.py	/^config = pipe.read_conf()$/;"	v
config	neuraloperator/scripts/train_darcy.py	/^        config=config,$/;"	v
config	neuraloperator/scripts/train_darcy.py	/^config = pipe.read_conf()$/;"	v
config	neuraloperator/scripts/train_navier_stokes.py	/^        config=config,$/;"	v
config	neuraloperator/scripts/train_navier_stokes.py	/^config = pipe.read_conf()$/;"	v
config	neuraloperator/setup.py	/^config = {$/;"	v
config_name	neuraloperator/scripts/hpo/tune_darcy.py	/^config_name = "default"$/;"	v
config_name	neuraloperator/scripts/hpo/tune_darcy.py	/^config_name = pipe.steps[-1].config_name$/;"	v
config_name	neuraloperator/scripts/test_from_config.py	/^config_name = 'default'$/;"	v
config_name	neuraloperator/scripts/test_from_config.py	/^config_name = pipe.steps[-1].config_name$/;"	v
config_name	neuraloperator/scripts/train_burgers.py	/^config_name = "default"$/;"	v
config_name	neuraloperator/scripts/train_burgers.py	/^config_name = pipe.steps[-1].config_name$/;"	v
config_name	neuraloperator/scripts/train_darcy.py	/^config_name = "default"$/;"	v
config_name	neuraloperator/scripts/train_darcy.py	/^config_name = pipe.steps[-1].config_name$/;"	v
config_name	neuraloperator/scripts/train_navier_stokes.py	/^config_name = "default"$/;"	v
config_name	neuraloperator/scripts/train_navier_stokes.py	/^config_name = pipe.steps[-1].config_name$/;"	v
constraint_func_and_grad	problems/problem_darcy.py	/^    def constraint_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:Darcy
constraint_func_and_grad	problems/problem_darcy_matrix.py	/^    def constraint_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:DarcyMatrix
constraint_func_and_grad	problems/problem_spring.py	/^    def constraint_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:Spring
copy	stochasticsqp.py	/^import copy$/;"	i
copy_to_model_parallel_region	neuraloperator/neuralop/mpu/mappings.py	/^def copy_to_model_parallel_region(input_):$/;"	f
copyright	neuraloperator/doc/source/conf.py	/^copyright = f'{year}, Jean Kossaifi, Nikola Kovachki, Zongyi Li and Anima Anandkumar'$/;"	v
count_model_params	FNO script.py	/^from neuralop.utils import count_model_params$/;"	i
count_model_params	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop.utils import count_model_params$/;"	i
count_model_params	neuraloperator/examples/plot_FNO_darcy.py	/^from neuralop.utils import count_model_params$/;"	i
count_model_params	neuraloperator/examples/plot_SFNO_swe.py	/^from neuralop.utils import count_model_params$/;"	i
count_model_params	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop.utils import count_model_params$/;"	i
count_model_params	neuraloperator/neuralop/tests/test_utils.py	/^from ..utils import count_model_params, count_tensor_params$/;"	i
count_model_params	neuraloperator/neuralop/utils.py	/^def count_model_params(model):$/;"	f
count_model_params	neuraloperator/scripts/train_burgers.py	/^from neuralop.utils import get_wandb_api_key, count_model_params$/;"	i
count_model_params	neuraloperator/scripts/train_darcy.py	/^from neuralop.utils import get_wandb_api_key, count_model_params$/;"	i
count_model_params	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop.utils import get_wandb_api_key, count_model_params$/;"	i
count_parameters	problems/problem_darcy.py	/^    def count_parameters(self, nn_net):$/;"	m	class:Darcy
count_parameters	problems/problem_darcy_matrix.py	/^    def count_parameters(self, nn_net):$/;"	m	class:DarcyMatrix
count_parameters	problems/problem_spring.py	/^    def count_parameters(self, nn_net):$/;"	m	class:Spring
count_params	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop.utils import get_wandb_api_key, count_params$/;"	i
count_tensor_params	neuraloperator/neuralop/datasets/output_encoder.py	/^from ..utils import count_tensor_params$/;"	i
count_tensor_params	neuraloperator/neuralop/tests/test_utils.py	/^from ..utils import count_model_params, count_tensor_params$/;"	i
count_tensor_params	neuraloperator/neuralop/utils.py	/^def count_tensor_params(tensor, dims=None):$/;"	f
cpu	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cpu(self):$/;"	m	class:DictTransform
cpu	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cpu(self):$/;"	m	class:MultipleFieldOutputEncoder
cpu	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cpu(self):$/;"	m	class:OutputEncoder
cpu	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cpu(self):$/;"	m	class:UnitGaussianNormalizer
cpu	neuraloperator/neuralop/datasets/transforms.py	/^    def cpu(self):$/;"	m	class:Transform
cpu	neuraloperator/neuralop/utils.py	/^    def cpu(self):$/;"	m	class:UnitGaussianNormalizer
ctypes	neuraloperator/neuralop/training/torch_setup.py	/^        import ctypes$/;"	i
cuda	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cuda(self):$/;"	m	class:DictTransform
cuda	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cuda(self):$/;"	m	class:MultipleFieldOutputEncoder
cuda	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cuda(self):$/;"	m	class:OutputEncoder
cuda	neuraloperator/neuralop/datasets/output_encoder.py	/^    def cuda(self):$/;"	m	class:UnitGaussianNormalizer
cuda	neuraloperator/neuralop/datasets/transforms.py	/^    def cuda(self):$/;"	m	class:Transform
cuda	neuraloperator/neuralop/utils.py	/^    def cuda(self):$/;"	m	class:UnitGaussianNormalizer
data	FNO script.py	/^    data = data_processor.preprocess(data, batched=False)$/;"	v
data	FNO script.py	/^    data = test_samples[index]$/;"	v
data	neuraloperator/examples/plot_FNO_darcy.py	/^    data = data_processor.preprocess(data, batched=False)$/;"	v
data	neuraloperator/examples/plot_FNO_darcy.py	/^    data = test_samples[index]$/;"	v
data	neuraloperator/examples/plot_SFNO_swe.py	/^    data = test_samples[0]$/;"	v
data	neuraloperator/examples/plot_UNO_darcy.py	/^    data = data_processor.preprocess(data, batched=False)$/;"	v
data	neuraloperator/examples/plot_UNO_darcy.py	/^    data = test_samples[index]$/;"	v
data	neuraloperator/examples/plot_darcy_flow.py	/^data = data_processor.preprocess(data, batched=False)$/;"	v
data	neuraloperator/examples/plot_darcy_flow.py	/^data = train_dataset[0]$/;"	v
data	neuraloperator/examples/plot_darcy_flow.py	/^data = train_dataset[index]$/;"	v
data	neuraloperator/neuralop/datasets/darcy.py	/^        data = torch.load(Path(data_path).joinpath(f"darcy_test_{res}.pt").as_posix())$/;"	v
data	neuraloperator/neuralop/datasets/darcy.py	/^    data = torch.load($/;"	v
data	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^    def data(self):$/;"	m	class:H5pyDataset
data	neuraloperator/neuralop/datasets/zarr_dataset.py	/^    def data(self):$/;"	m	class:ZarrDataset
data_processor	FNO dataset.py	/^data_processor = data_processor.to(device)$/;"	v
data_processor	FNO script.py	/^                  data_processor=data_processor,$/;"	v
data_processor	FNO script.py	/^data_processor = data_processor.to(device)$/;"	v
data_processor	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  data_processor=data_processor,$/;"	v
data_processor	neuraloperator/examples/plot_FNO_darcy.py	/^                  data_processor=data_processor,$/;"	v
data_processor	neuraloperator/examples/plot_FNO_darcy.py	/^data_processor = data_processor.to(device)$/;"	v
data_processor	neuraloperator/examples/plot_UNO_darcy.py	/^                  data_processor=data_processor,$/;"	v
data_processor	neuraloperator/neuralop/datasets/darcy.py	/^    data_processor = DefaultDataProcessor($/;"	v
data_processor	neuraloperator/scripts/train_burgers.py	/^    data_processor=data_processor,$/;"	v
data_processor	neuraloperator/scripts/train_burgers.py	/^data_processor = MGPatchingDataProcessor(model=model,$/;"	v
data_processor	neuraloperator/scripts/train_darcy.py	/^    data_processor = MGPatchingDataProcessor(in_normalizer=data_processor.in_normalizer,$/;"	v
data_processor	neuraloperator/scripts/train_darcy.py	/^    data_processor=data_processor,$/;"	v
data_processor	neuraloperator/scripts/train_darcy.py	/^data_processor = data_processor.to(device)$/;"	v
data_processor	neuraloperator/scripts/train_navier_stokes.py	/^    data_processor = MGPatchingDataProcessor(in_normalizer=data_processor.in_normalizer,$/;"	v
data_processor	neuraloperator/scripts/train_navier_stokes.py	/^    data_processor=data_processor,$/;"	v
data_processor	neuraloperator/scripts/train_navier_stokes.py	/^data_processor = data_processor.to(device)$/;"	v
dataset_name	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^dataset_name = "Darcy Flow"$/;"	v
dataset_pred	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^dataset_pred = train_loader.dataset[:samples]['x'].squeeze() # squeeze the dataset to remove the batch dimension or other dimensions$/;"	v
datasets	neuraloperator/neuralop/__init__.py	/^from . import datasets$/;"	i
datetime	neuraloperator/doc/source/conf.py	/^from datetime import datetime$/;"	i
decode	neuraloperator/neuralop/datasets/output_encoder.py	/^    def decode(self):$/;"	m	class:OutputEncoder
decode	neuraloperator/neuralop/datasets/output_encoder.py	/^    def decode(self, x):$/;"	m	class:MultipleFieldOutputEncoder
decode	neuraloperator/neuralop/utils.py	/^    def decode(self, x, sample_idx=None):$/;"	m	class:UnitGaussianNormalizer
default_timer	neuraloperator/neuralop/training/trainer.py	/^from timeit import default_timer$/;"	i
device	FNO dataset.py	/^device = 'cpu'$/;"	v
device	FNO script.py	/^                  device=device,$/;"	v
device	FNO script.py	/^device = 'cpu'$/;"	v
device	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  device=device,$/;"	v
device	neuraloperator/examples/checkpoint_FNO_darcy.py	/^device = 'cpu'$/;"	v
device	neuraloperator/examples/plot_FNO_darcy.py	/^                  device=device,$/;"	v
device	neuraloperator/examples/plot_FNO_darcy.py	/^device = 'cpu'$/;"	v
device	neuraloperator/examples/plot_SFNO_swe.py	/^                  device=device,$/;"	v
device	neuraloperator/examples/plot_SFNO_swe.py	/^device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')$/;"	v
device	neuraloperator/examples/plot_UNO_darcy.py	/^                  device=device,$/;"	v
device	neuraloperator/examples/plot_UNO_darcy.py	/^device = 'cpu'$/;"	v
device	neuraloperator/scripts/test_from_config.py	/^    device = 'cpu'$/;"	v
device	neuraloperator/scripts/test_from_config.py	/^    device = 'cuda'$/;"	v
device	neuraloperator/scripts/train_burgers.py	/^                                       device=device,$/;"	v
device	neuraloperator/scripts/train_burgers.py	/^    device=device,$/;"	v
device	neuraloperator/scripts/train_darcy.py	/^    device=device,$/;"	v
device	neuraloperator/scripts/train_navier_stokes.py	/^    device=device,$/;"	v
device	solve.py	/^device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
directory_path	solve.py	/^directory_path = '.\/problems'$/;"	v
disable_logging	neuraloperator/neuralop/mpu/comm.py	/^class disable_logging(object):$/;"	c
dist	neuraloperator/neuralop/mpu/comm.py	/^import torch.distributed as dist$/;"	i
dist	neuraloperator/neuralop/mpu/helpers.py	/^import torch.distributed as dist$/;"	i
dist	neuraloperator/neuralop/mpu/mappings.py	/^import torch.distributed as dist$/;"	i
dt	neuraloperator/neuralop/mpu/comm.py	/^import datetime as dt$/;"	i
einsum_complexhalf	neuraloperator/neuralop/layers/einsum_utils.py	/^def einsum_complexhalf(eq, *args):$/;"	f
einsum_complexhalf	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from .einsum_utils import einsum_complexhalf$/;"	i
einsum_complexhalf	neuraloperator/neuralop/layers/spectral_convolution.py	/^from .einsum_utils import einsum_complexhalf$/;"	i
einsum_complexhalf_two_input	neuraloperator/neuralop/layers/einsum_utils.py	/^def einsum_complexhalf_two_input(eq, a, b):$/;"	f
einsum_symbols	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^einsum_symbols = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	v
einsum_symbols	neuraloperator/neuralop/layers/spectral_convolution.py	/^einsum_symbols = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	v
einsum_symbols	neuraloperator/neuralop/layers/spherical_convolution.py	/^einsum_symbols = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"$/;"	v
encode	neuraloperator/neuralop/datasets/output_encoder.py	/^    def encode(self):$/;"	m	class:OutputEncoder
encode	neuraloperator/neuralop/datasets/output_encoder.py	/^    def encode(self, x):$/;"	m	class:MultipleFieldOutputEncoder
encode	neuraloperator/neuralop/utils.py	/^    def encode(self, x):$/;"	m	class:UnitGaussianNormalizer
encode_input	neuraloperator/neuralop/datasets/darcy.py	/^        encode_input=encode_input,$/;"	v
encode_input	neuraloperator/scripts/hpo/tune_darcy.py	/^    encode_input=config.data.encode_input,$/;"	v
encode_input	neuraloperator/scripts/train_darcy.py	/^    encode_input=False,$/;"	v
encode_input	neuraloperator/scripts/train_navier_stokes.py	/^    encode_input=config.data.encode_input,$/;"	v
encode_output	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^        encode_output=False$/;"	v
encode_output	neuraloperator/neuralop/datasets/darcy.py	/^        encode_output=encode_output,$/;"	v
encode_output	neuraloperator/scripts/hpo/tune_darcy.py	/^    encode_output=config.data.encode_output,$/;"	v
encode_output	neuraloperator/scripts/train_darcy.py	/^    encode_output=False,$/;"	v
encode_output	neuraloperator/scripts/train_navier_stokes.py	/^    encode_output=config.data.encode_output,$/;"	v
encoding	neuraloperator/neuralop/datasets/darcy.py	/^        encoding=encoding,$/;"	v
end	neuraloperator/doc/make.bat	/^:end$/;"	l
entity	neuraloperator/scripts/hpo/tune_darcy.py	/^        entity=config.wandb.entity,$/;"	v
entity	neuraloperator/scripts/train_burgers.py	/^        entity=config.wandb.entity,$/;"	v
entity	neuraloperator/scripts/train_darcy.py	/^        entity=config.wandb.entity,$/;"	v
entity	neuraloperator/scripts/train_navier_stokes.py	/^        entity=config.wandb.entity,$/;"	v
epsilon	stochasticsqp.py	/^    epsilon=1e-6$/;"	v	class:StochasticSQP
equation_loss	neuraloperator/scripts/train_burgers.py	/^equation_loss = BurgersEqnLoss(method=config.opt.get('pino_method', None), $/;"	v
eta	stochasticsqp.py	/^    eta=1e-4 # line search parameter$/;"	v	class:StochasticSQP
eval_losses	FNO script.py	/^              eval_losses=eval_losses)$/;"	v
eval_losses	FNO script.py	/^eval_losses={'h1': h1loss, 'l2': l2loss}$/;"	v
eval_losses	neuraloperator/examples/checkpoint_FNO_darcy.py	/^eval_losses={'h1': h1loss, 'l2': l2loss}$/;"	v
eval_losses	neuraloperator/examples/plot_FNO_darcy.py	/^              eval_losses=eval_losses)$/;"	v
eval_losses	neuraloperator/examples/plot_FNO_darcy.py	/^eval_losses={'h1': h1loss, 'l2': l2loss}$/;"	v
eval_losses	neuraloperator/examples/plot_SFNO_swe.py	/^              eval_losses=eval_losses)$/;"	v
eval_losses	neuraloperator/examples/plot_SFNO_swe.py	/^eval_losses={'l2': l2loss} #'h1': h1loss, $/;"	v
eval_losses	neuraloperator/examples/plot_UNO_darcy.py	/^              eval_losses=eval_losses)$/;"	v
eval_losses	neuraloperator/examples/plot_UNO_darcy.py	/^eval_losses={'h1': h1loss, 'l2': l2loss}$/;"	v
eval_losses	neuraloperator/scripts/train_burgers.py	/^    eval_losses=eval_losses,$/;"	v
eval_losses	neuraloperator/scripts/train_burgers.py	/^eval_losses = {"h1": h1loss, "l2": l2loss}$/;"	v
eval_losses	neuraloperator/scripts/train_darcy.py	/^    eval_losses=eval_losses,$/;"	v
eval_losses	neuraloperator/scripts/train_darcy.py	/^eval_losses = {"h1": h1loss, "l2": l2loss}$/;"	v
eval_losses	neuraloperator/scripts/train_navier_stokes.py	/^    eval_losses=eval_losses,$/;"	v
eval_losses	neuraloperator/scripts/train_navier_stokes.py	/^eval_losses = {"h1": h1loss, "l2": l2loss}$/;"	v
evaluate	neuraloperator/neuralop/training/trainer.py	/^    def evaluate(self, loss_dict, data_loader,$/;"	m	class:Trainer
exclude_patterns	neuraloperator/doc/source/conf.py	/^exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']$/;"	v
exclude_patterns	neuraloperator/doc/source/conf.py	/^exclude_patterns = []$/;"	v
extend2d	neuraloperator/neuralop/layers/fourier_continuation.py	/^    def extend2d(self, x):$/;"	m	class:FCLegendre
extend_left_right	neuraloperator/neuralop/layers/fourier_continuation.py	/^    def extend_left_right(self, x):$/;"	m	class:FCLegendre
extend_top_bottom	neuraloperator/neuralop/layers/fourier_continuation.py	/^    def extend_top_bottom(self, x):$/;"	m	class:FCLegendre
extensions	neuraloperator/doc/source/conf.py	/^extensions = [$/;"	v
f	Test file.py	/^f = torch.linalg.vector_norm(second_grad0, ord= 1)\/2$/;"	v
factor	neuraloperator/scripts/train_burgers.py	/^        factor=config.opt.gamma,$/;"	v
factor	neuraloperator/scripts/train_darcy.py	/^        factor=config.opt.gamma,$/;"	v
factor	neuraloperator/scripts/train_navier_stokes.py	/^        factor=config.opt.gamma,$/;"	v
fdm	neuraloperator/neuralop/losses/equation_losses.py	/^    def fdm(self, u):$/;"	m	class:BurgersEqnLoss
fig	FNO script.py	/^fig = plt.figure(figsize=(7, 7))$/;"	v
fig	neuraloperator/examples/plot_FNO_darcy.py	/^fig = plt.figure(figsize=(7, 7))$/;"	v
fig	neuraloperator/examples/plot_SFNO_swe.py	/^fig = plt.figure(figsize=(7, 7))$/;"	v
fig	neuraloperator/examples/plot_UNO_darcy.py	/^fig = plt.figure(figsize=(7, 7))$/;"	v
fig	neuraloperator/examples/plot_darcy_flow.py	/^fig = plt.figure(figsize=(7, 7))$/;"	v
final_grad	Test file.py	/^final_grad = torch.cat((grad_sum[0], grad_sum[1]), dim=1)$/;"	v
find_packages	neuraloperator/setup.py	/^    from distutils.core import setup, find_packages$/;"	i
find_packages	neuraloperator/setup.py	/^    from setuptools import setup, find_packages$/;"	i
fit	neuraloperator/neuralop/datasets/output_encoder.py	/^    def fit(self, data_batch):$/;"	m	class:UnitGaussianNormalizer
floor	neuraloperator/neuralop/datasets/spherical_swe.py	/^from math import ceil, floor$/;"	i
font	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^font = {'size'   : 28}$/;"	v
forward	neuraloperator/neuralop/datasets/data_transforms.py	/^    def forward(self, **data_dict):$/;"	m	class:DefaultDataProcessor
forward	neuraloperator/neuralop/datasets/data_transforms.py	/^    def forward(self, **data_dict):$/;"	m	class:MGPatchingDataProcessor
forward	neuraloperator/neuralop/datasets/output_encoder.py	/^    def forward(self, x):$/;"	m	class:UnitGaussianNormalizer
forward	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^    def forward(self,$/;"	m	class:AttentionKernelIntegral
forward	neuraloperator/neuralop/layers/embeddings.py	/^    def forward(self, coordinates):$/;"	m	class:RotaryEmbedding
forward	neuraloperator/neuralop/layers/embeddings.py	/^    def forward(self, x):$/;"	m	class:PositionalEmbedding
forward	neuraloperator/neuralop/layers/fno_block.py	/^    def forward(self, x):$/;"	m	class:SubModule
forward	neuraloperator/neuralop/layers/fno_block.py	/^    def forward(self, x, index=0, output_shape=None):$/;"	m	class:FNOBlocks
forward	neuraloperator/neuralop/layers/fourier_continuation.py	/^    def forward(self, x):$/;"	m	class:FCLegendre
forward	neuraloperator/neuralop/layers/integral_transform.py	/^    def forward($/;"	m	class:IntegralTransform
forward	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def forward($/;"	m	class:SpectralConv
forward	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def forward(self, x, **kwargs):$/;"	m	class:SubConv
forward	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def forward(self, x, indices=0):$/;"	m	class:SpectralConv1d
forward	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def forward(self, x, indices=0):$/;"	m	class:SpectralConv2d
forward	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def forward(self, x, indices=0):$/;"	m	class:SpectralConv3d
forward	neuraloperator/neuralop/layers/mlp.py	/^    def forward(self, x):$/;"	m	class:MLP
forward	neuraloperator/neuralop/layers/mlp.py	/^    def forward(self, x):$/;"	m	class:MLPLinear
forward	neuraloperator/neuralop/layers/neighbor_search.py	/^    def forward(self, data, queries, radius):$/;"	m	class:NeighborSearch
forward	neuraloperator/neuralop/layers/normalization_layers.py	/^    def forward(self, x):$/;"	m	class:AdaIN
forward	neuraloperator/neuralop/layers/padding.py	/^    def forward(self, x):$/;"	m	class:DomainPadding
forward	neuraloperator/neuralop/layers/skip_connections.py	/^    def forward(self, x):$/;"	m	class:SoftGating
forward	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def forward($/;"	m	class:SpectralConv
forward	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def forward(self, x, **kwargs):$/;"	m	class:SubConv
forward	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def forward(self, x, indices=0):$/;"	m	class:SpectralConv1d
forward	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def forward(self, x, indices=0):$/;"	m	class:SpectralConv2d
forward	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def forward(self, x, indices=0):$/;"	m	class:SpectralConv3d
forward	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def forward(self, x, indices=0, output_shape=None):$/;"	m	class:SphericalConv
forward	neuraloperator/neuralop/losses/data_losses.py	/^    def forward(self, y_pred, y, vol_elm, **kwargs):$/;"	m	class:IregularLpqLoss
forward	neuraloperator/neuralop/models/fno.py	/^    def forward(self, x, output_shape=None, **kwargs):$/;"	m	class:FNO
forward	neuraloperator/neuralop/models/fnogno.py	/^    def forward(self, in_p, out_p, f, ada_in=None, **kwargs):$/;"	m	class:FNOGNO
forward	neuraloperator/neuralop/models/uno.py	/^    def forward(self, x, **kwargs):$/;"	m	class:UNO
forward	neuraloperator/neuralop/mpu/mappings.py	/^    def forward(ctx, input_):$/;"	m	class:_CopyToModelParallelRegion
forward	neuraloperator/neuralop/mpu/mappings.py	/^    def forward(ctx, input_):$/;"	m	class:_ReduceFromModelParallelRegion
forward	neuraloperator/neuralop/mpu/mappings.py	/^    def forward(ctx, input_, dim_):$/;"	m	class:_GatherFromModelParallelRegion
forward	neuraloperator/neuralop/mpu/mappings.py	/^    def forward(ctx, input_, dim_):$/;"	m	class:_ScatterToModelParallelRegion
forward	neuraloperator/neuralop/training/tests/test_callbacks.py	/^    def forward(self, x, **kwargs):$/;"	m	class:DummyModel
forward	nn_architecture.py	/^    def forward(self, inputs):$/;"	m	class:FNOLocal
forward	nn_architecture.py	/^    def forward(self, inputs):$/;"	m	class:OneHiddenLayerFCNN
forward	nn_architecture.py	/^    def forward(self, inputs):$/;"	m	class:TwoHiddenLayerFCNN
forward_with_postactivation	neuraloperator/neuralop/layers/fno_block.py	/^    def forward_with_postactivation(self, x, index=0, output_shape=None):$/;"	m	class:FNOBlocks
forward_with_preactivation	neuraloperator/neuralop/layers/fno_block.py	/^    def forward_with_preactivation(self, x, index=0, output_shape=None):$/;"	m	class:FNOBlocks
friction_drag	neuraloperator/neuralop/losses/data_losses.py	/^def friction_drag(wall_shear_stress, vol_elm, $/;"	f
from_checkpoint	neuraloperator/neuralop/models/base_model.py	/^    def from_checkpoint(cls, save_folder, save_name):$/;"	m	class:BaseModel
from_dataset	neuraloperator/neuralop/datasets/output_encoder.py	/^    def from_dataset(cls, dataset, dim=None, keys=None, mask=None):$/;"	m	class:UnitGaussianNormalizer
gather_from_model_parallel_region	neuraloperator/neuralop/mpu/mappings.py	/^def gather_from_model_parallel_region(input_, dim):$/;"	f
generate_sample	problems/problem_darcy.py	/^    def generate_sample(self):$/;"	m	class:Darcy
generate_sample	problems/problem_darcy_matrix.py	/^    def generate_sample(self, device):$/;"	m	class:DarcyMatrix
generate_sample	problems/problem_spring.py	/^    def generate_sample(self):$/;"	m	class:Spring
get_block	neuraloperator/neuralop/layers/fno_block.py	/^    def get_block(self, indices):$/;"	m	class:FNOBlocks
get_contract_fun	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^def get_contract_fun(weight, implementation="reconstructed", separable=False):$/;"	f
get_contract_fun	neuraloperator/neuralop/layers/spectral_convolution.py	/^def get_contract_fun(weight, implementation="reconstructed", separable=False):$/;"	f
get_contract_fun	neuraloperator/neuralop/layers/spherical_convolution.py	/^def get_contract_fun(weight, implementation="reconstructed", separable=False):$/;"	f
get_conv	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def get_conv(self, indices):$/;"	m	class:SpectralConv
get_conv	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def get_conv(self, indices):$/;"	m	class:SpectralConv
get_conv	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def get_conv(self, indices):$/;"	m	class:SphericalConv
get_data_parallel_group	neuraloperator/neuralop/mpu/comm.py	/^def get_data_parallel_group():$/;"	f
get_data_parallel_rank	neuraloperator/neuralop/mpu/comm.py	/^def get_data_parallel_rank():$/;"	f
get_data_parallel_size	neuraloperator/neuralop/mpu/comm.py	/^def get_data_parallel_size():$/;"	f
get_local_rank	neuraloperator/neuralop/mpu/comm.py	/^def get_local_rank():$/;"	f
get_memory_format	neuraloperator/neuralop/mpu/helpers.py	/^def get_memory_format(tensor):$/;"	f
get_model	neuraloperator/neuralop/__init__.py	/^from .models import get_model$/;"	i
get_model	neuraloperator/neuralop/models/__init__.py	/^from .base_model import get_model$/;"	i
get_model	neuraloperator/neuralop/models/base_model.py	/^def get_model(config):$/;"	f
get_model	neuraloperator/neuralop/tests/test_model_from_config.py	/^from neuralop import get_model$/;"	i
get_model	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
get_model	neuraloperator/scripts/test_from_config.py	/^from neuralop import get_model$/;"	i
get_model	neuraloperator/scripts/train_burgers.py	/^from neuralop import H1Loss, LpLoss, BurgersEqnLoss, ICLoss, WeightedSumLoss, Trainer, get_model$/;"	i
get_model	neuraloperator/scripts/train_darcy.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
get_model	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop import H1Loss, LpLoss, Trainer, get_model$/;"	i
get_model_parallel_group	neuraloperator/neuralop/mpu/comm.py	/^def get_model_parallel_group():$/;"	f
get_model_parallel_group	neuraloperator/neuralop/mpu/mappings.py	/^from .comm import get_model_parallel_group$/;"	i
get_model_parallel_rank	neuraloperator/neuralop/mpu/comm.py	/^def get_model_parallel_rank():$/;"	f
get_model_parallel_size	neuraloperator/neuralop/mpu/comm.py	/^def get_model_parallel_size():$/;"	f
get_wandb_api_key	neuraloperator/neuralop/tests/test_utils.py	/^from ..utils import get_wandb_api_key, wandb_login$/;"	i
get_wandb_api_key	neuraloperator/neuralop/utils.py	/^def get_wandb_api_key(api_key_file="..\/config\/wandb_api_key.txt"):$/;"	f
get_wandb_api_key	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop.utils import get_wandb_api_key, count_params$/;"	i
get_wandb_api_key	neuraloperator/scripts/train_burgers.py	/^from neuralop.utils import get_wandb_api_key, count_model_params$/;"	i
get_wandb_api_key	neuraloperator/scripts/train_darcy.py	/^from neuralop.utils import get_wandb_api_key, count_model_params$/;"	i
get_wandb_api_key	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop.utils import get_wandb_api_key, count_model_params$/;"	i
get_world_rank	neuraloperator/neuralop/mpu/comm.py	/^def get_world_rank():$/;"	f
get_world_size	neuraloperator/neuralop/mpu/comm.py	/^def get_world_size():$/;"	f
grad_sum	Test file.py	/^grad_sum = torch.autograd.grad(outputs=Q.sum(), inputs=(a,b), create_graph=True)$/;"	v
grad_sum	Test file.py	/^grad_sum = torch.autograd.grad(outputs=Q.sum(), inputs=(a1,b1), create_graph=True)$/;"	v
grid	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^grid = torch.cat((gridx, gridy), dim=-1)$/;"	v
grid	neuraloperator/neuralop/datasets/transforms.py	/^    def grid(self, spatial_dims, device, dtype):$/;"	m	class:PositionalEmbedding2D
grid_boundaries	neuraloperator/neuralop/datasets/darcy.py	/^        grid_boundaries=grid_boundaries,$/;"	v
gridx	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^gridx = gridx.reshape(1, size_x, 1).repeat([batchsize, 1, size_y])$/;"	v
gridx	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^gridx = torch.tensor(np.linspace(-1, 1, size_x), dtype=torch.float)$/;"	v
gridy	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^gridy = gridy.reshape(1, 1, size_y).repeat([batchsize, size_x, 1])$/;"	v
gridy	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^gridy = torch.tensor(np.linspace(-1, 1, size_y), dtype=torch.float)$/;"	v
group	neuraloperator/scripts/hpo/tune_darcy.py	/^        group=config.wandb.group,$/;"	v
group	neuraloperator/scripts/train_burgers.py	/^        group=config.wandb.group,$/;"	v
group	neuraloperator/scripts/train_darcy.py	/^        group=config.wandb.group,$/;"	v
group	neuraloperator/scripts/train_navier_stokes.py	/^        group=config.wandb.group,$/;"	v
h1loss	FNO script.py	/^h1loss = H1Loss(d=2)$/;"	v
h1loss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^h1loss = H1Loss(d=2)$/;"	v
h1loss	neuraloperator/examples/plot_FNO_darcy.py	/^h1loss = H1Loss(d=2)$/;"	v
h1loss	neuraloperator/examples/plot_UNO_darcy.py	/^h1loss = H1Loss(d=2)$/;"	v
h1loss	neuraloperator/scripts/train_burgers.py	/^h1loss = H1Loss(d=2)$/;"	v
h1loss	neuraloperator/scripts/train_darcy.py	/^h1loss = H1Loss(d=2)$/;"	v
h1loss	neuraloperator/scripts/train_navier_stokes.py	/^h1loss = H1Loss(d=2)$/;"	v
h5py	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^import h5py$/;"	i
help	neuraloperator/doc/make.bat	/^:help$/;"	l
hidden_channels	problems/problem_darcy_matrix.py	/^    hidden_channels=4$/;"	v	class:DarcyMatrix
html_logo	neuraloperator/doc/source/conf.py	/^html_logo = '_static\/logos\/neuraloperator_logo.png'$/;"	v
html_permalinks_icon	neuraloperator/doc/source/conf.py	/^html_permalinks_icon = ""$/;"	v
html_show_sphinx	neuraloperator/doc/source/conf.py	/^html_show_sphinx = False$/;"	v
html_static_path	neuraloperator/doc/source/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	neuraloperator/doc/source/conf.py	/^html_theme = 'tensorly_sphinx_theme'$/;"	v
html_theme_options	neuraloperator/doc/source/conf.py	/^html_theme_options = {$/;"	v
ic_loss	neuraloperator/scripts/train_burgers.py	/^ic_loss = ICLoss()$/;"	v
idx	neuraloperator/neuralop/datasets/darcy.py	/^    idx = test_resolutions.index(train_resolution)$/;"	v
imgmath_image_format	neuraloperator/doc/source/conf.py	/^imgmath_image_format = 'svg'$/;"	v
import_all_classes_from_directory	solve.py	/^def import_all_classes_from_directory(directory):$/;"	f
importlib	neuraloperator/neuralop/layers/segment_csr.py	/^import importlib$/;"	i
importlib	solve.py	/^import importlib.util$/;"	i
in_data	neuraloperator/scripts/test_from_config.py	/^in_data = torch.randn(batch_size, 3, size, size).to(device)$/;"	v
in_normalizer	neuraloperator/neuralop/datasets/darcy.py	/^        in_normalizer=input_encoder,$/;"	v
in_normalizer	neuraloperator/scripts/train_burgers.py	/^                                       in_normalizer=output_encoder,$/;"	v
increase_l2_fetch_granularity	neuraloperator/neuralop/training/torch_setup.py	/^def increase_l2_fetch_granularity():$/;"	f
incremental_n_modes	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def incremental_n_modes(self):$/;"	m	class:SpectralConv
incremental_n_modes	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def incremental_n_modes(self, incremental_n_modes):$/;"	m	class:SpectralConv
incremental_update_mean_std	neuraloperator/neuralop/datasets/output_encoder.py	/^    def incremental_update_mean_std(self, data_batch):$/;"	m	class:UnitGaussianNormalizer
index	neuraloperator/examples/plot_darcy_flow.py	/^index = 0$/;"	v
index	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^index = 1$/;"	v
indices	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^indices = [0, 1, 5, 0, 1, 2, 6, 1, 2, 3, 7, 2, 3, 4, 8,$/;"	v
init	neuraloperator/neuralop/mpu/comm.py	/^def init(config, verbose = False):$/;"	f
init_weight	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^    def init_weight(self, weight, init_fn):$/;"	m	class:AttentionKernelIntegral
initial_condition_loss	neuraloperator/neuralop/losses/equation_losses.py	/^    def initial_condition_loss(self, y_pred, x):$/;"	m	class:ICLoss
initialize_qkv_weights	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^    def initialize_qkv_weights(self):$/;"	m	class:AttentionKernelIntegral
input_encoder	neuraloperator/neuralop/datasets/darcy.py	/^        input_encoder = None$/;"	v
input_encoder	neuraloperator/neuralop/datasets/darcy.py	/^        input_encoder = UnitGaussianNormalizer(dim=reduce_dims)$/;"	v
inspect	neuraloperator/neuralop/models/base_model.py	/^import inspect$/;"	i
integrate_latent	neuraloperator/neuralop/models/fnogno.py	/^    def integrate_latent(self, in_p, out_p, latent_embed):$/;"	m	class:FNOGNO
inverse_transform	neuraloperator/neuralop/datasets/output_encoder.py	/^    def inverse_transform(self, x):$/;"	m	class:DictTransform
inverse_transform	neuraloperator/neuralop/datasets/output_encoder.py	/^    def inverse_transform(self, x):$/;"	m	class:UnitGaussianNormalizer
inverse_transform	neuraloperator/neuralop/datasets/transforms.py	/^    def inverse_transform(self):$/;"	m	class:Transform
inverse_transform	neuraloperator/neuralop/datasets/transforms.py	/^    def inverse_transform(self, data_dict):$/;"	m	class:Composite
inverse_transform	neuraloperator/neuralop/datasets/transforms.py	/^    def inverse_transform(self, data_dict):$/;"	m	class:MGPatchingTransform
isht	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def isht(self, x, s=None, norm="ortho", grid="equiangular"):$/;"	m	class:SHT
iterative_resample	neuraloperator/neuralop/layers/resample.py	/^def iterative_resample(x, res_scale, axis):$/;"	f
itertools	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^import itertools$/;"	i
itertools	neuraloperator/neuralop/layers/resample.py	/^import itertools$/;"	i
k	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^k = np.arange(length + buffer) * 1.0$/;"	v
l2loss	FNO script.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
l2loss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
l2loss	neuraloperator/examples/plot_FNO_darcy.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
l2loss	neuraloperator/examples/plot_SFNO_swe.py	/^l2loss = LpLoss(d=2, p=2, reduce_dims=(0,1))$/;"	v
l2loss	neuraloperator/examples/plot_UNO_darcy.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
l2loss	neuraloperator/scripts/train_burgers.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
l2loss	neuraloperator/scripts/train_darcy.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
l2loss	neuraloperator/scripts/train_navier_stokes.py	/^l2loss = LpLoss(d=2, p=2)$/;"	v
latent_embedding	neuraloperator/neuralop/models/fnogno.py	/^    def latent_embedding(self, in_p, f, ada_in=None):$/;"	m	class:FNOGNO
leg	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^leg = plt.legend(loc='best')$/;"	v
length	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^length = 16 # typically till the resolution length of the dataset$/;"	v
levels	neuraloperator/scripts/train_burgers.py	/^                                       levels=config.patching.levels,$/;"	v
levels	neuraloperator/scripts/train_darcy.py	/^                                             levels=config.patching.levels)$/;"	v
levels	neuraloperator/scripts/train_navier_stokes.py	/^                                             levels=config.patching.levels)$/;"	v
linewidth	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^linewidth = 3$/;"	v
load_burgers_1d	neuraloperator/neuralop/datasets/burgers.py	/^def load_burgers_1d($/;"	f
load_burgers_1dtime	neuraloperator/neuralop/datasets/__init__.py	/^from .burgers import load_burgers_1dtime$/;"	i
load_burgers_1dtime	neuraloperator/neuralop/datasets/burgers.py	/^def load_burgers_1dtime($/;"	f
load_burgers_1dtime	neuraloperator/scripts/train_burgers.py	/^from neuralop.datasets import load_burgers_1dtime$/;"	i
load_checkpoint	neuraloperator/neuralop/models/base_model.py	/^    def load_checkpoint(self, save_folder, save_name):$/;"	m	class:BaseModel
load_darcy_flow_small	FNO dataset.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	FNO script.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/examples/checkpoint_FNO_darcy.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/examples/plot_FNO_darcy.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/examples/plot_UNO_darcy.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/examples/plot_darcy_flow.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/neuralop/datasets/__init__.py	/^from .darcy import load_darcy_pt, load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/neuralop/datasets/darcy.py	/^def load_darcy_flow_small($/;"	f
load_darcy_flow_small	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	neuraloperator/scripts/train_darcy.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_flow_small	problems/problem_darcy_matrix.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_darcy_pt	neuraloperator/neuralop/datasets/__init__.py	/^from .darcy import load_darcy_pt, load_darcy_flow_small$/;"	i
load_darcy_pt	neuraloperator/neuralop/datasets/darcy.py	/^def load_darcy_pt($/;"	f
load_navier_stokes_pt	neuraloperator/neuralop/datasets/__init__.py	/^from .navier_stokes import load_navier_stokes_pt $/;"	i
load_navier_stokes_pt	neuraloperator/neuralop/datasets/navier_stokes.py	/^def load_navier_stokes_pt(data_path, train_resolution,$/;"	f
load_navier_stokes_pt	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop.datasets.navier_stokes import load_navier_stokes_pt$/;"	i
load_net	problems/problem_darcy_matrix.py	/^    def load_net(self,path):$/;"	m	class:DarcyMatrix
load_pt_traintestsplit	neuraloperator/neuralop/datasets/__init__.py	/^from .pt_dataset import load_pt_traintestsplit$/;"	i
load_pt_traintestsplit	neuraloperator/neuralop/datasets/pt_dataset.py	/^def load_pt_traintestsplit(data_path, $/;"	f
load_spherical_swe	neuraloperator/examples/plot_SFNO_swe.py	/^from neuralop.datasets import load_spherical_swe$/;"	i
load_spherical_swe	neuraloperator/neuralop/datasets/__init__.py	/^from .spherical_swe import load_spherical_swe$/;"	i
load_spherical_swe	neuraloperator/neuralop/datasets/spherical_swe.py	/^def load_spherical_swe(n_train, n_tests, batch_size, test_batch_sizes,$/;"	f
load_training_state	neuraloperator/neuralop/training/__init__.py	/^from .training_state import load_training_state, save_training_state/;"	i
load_training_state	neuraloperator/neuralop/training/training_state.py	/^def load_training_state(save_dir: Union[str, Path], save_name: str,$/;"	f
log_output	FNO script.py	/^                  log_output=True,$/;"	v
log_output	neuraloperator/scripts/train_burgers.py	/^    log_output=config.wandb.log_output,$/;"	v
log_output	neuraloperator/scripts/train_darcy.py	/^    log_output=config.wandb.log_output,$/;"	v
log_output	neuraloperator/scripts/train_navier_stokes.py	/^    log_output=config.wandb.log_output,$/;"	v
log_test_interval	FNO script.py	/^                  log_test_interval=3,$/;"	v
log_test_interval	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  log_test_interval=3,$/;"	v
log_test_interval	neuraloperator/examples/plot_FNO_darcy.py	/^                  log_test_interval=3,$/;"	v
log_test_interval	neuraloperator/examples/plot_SFNO_swe.py	/^                  log_test_interval=3,$/;"	v
log_test_interval	neuraloperator/examples/plot_UNO_darcy.py	/^                  log_test_interval=3,$/;"	v
log_test_interval	neuraloperator/scripts/train_burgers.py	/^    log_test_interval=config.wandb.log_test_interval,$/;"	v
log_test_interval	neuraloperator/scripts/train_darcy.py	/^    log_test_interval=config.wandb.log_test_interval,$/;"	v
log_test_interval	neuraloperator/scripts/train_navier_stokes.py	/^    log_test_interval=config.wandb.log_test_interval,$/;"	v
logging	neuraloperator/neuralop/mpu/comm.py	/^import logging$/;"	i
login	neuraloperator/neuralop/tests/test_utils.py	/^    def login(key):$/;"	f	function:test_ArgparseConfig
loss	neuraloperator/scripts/test_from_config.py	/^loss = out.sum()$/;"	v
losses	neuraloperator/scripts/train_burgers.py	/^losses = []$/;"	v
lr	FNO script.py	/^                                lr=8e-3,$/;"	v
lr	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                                lr=8e-3, $/;"	v
lr	neuraloperator/examples/plot_FNO_darcy.py	/^                                lr=8e-3, $/;"	v
lr	neuraloperator/examples/plot_SFNO_swe.py	/^                                lr=8e-4, $/;"	v
lr	neuraloperator/examples/plot_UNO_darcy.py	/^                                lr=8e-3, $/;"	v
lr	neuraloperator/scripts/train_burgers.py	/^    lr=config.opt.learning_rate,$/;"	v
lr	neuraloperator/scripts/train_darcy.py	/^    lr=config.opt.learning_rate,$/;"	v
lr	neuraloperator/scripts/train_navier_stokes.py	/^    lr=config.opt.learning_rate,$/;"	v
lr	solve.py	/^                          lr= 1,$/;"	v
make_patches	neuraloperator/neuralop/training/patching.py	/^def make_patches(x, n, p=0):$/;"	f
math	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^import math$/;"	i
math	neuraloperator/neuralop/layers/embeddings.py	/^import math$/;"	i
math	neuraloperator/neuralop/losses/data_losses.py	/^import math$/;"	i
math	neuraloperator/neuralop/training/patching.py	/^import math$/;"	i
matplotlib	FNO script.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	neuraloperator/examples/checkpoint_FNO_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	neuraloperator/examples/plot_FNO_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	neuraloperator/examples/plot_SFNO_swe.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	neuraloperator/examples/plot_UNO_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	neuraloperator/examples/plot_darcy_flow.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^import matplotlib$/;"	i
matplotlib	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^import matplotlib.pyplot as plt$/;"	i
merit_param_init	solve.py	/^                          merit_param_init = 1, $/;"	v
mode	neuraloperator/scripts/train_burgers.py	/^        mode="min",$/;"	v
mode	neuraloperator/scripts/train_darcy.py	/^        mode="min",$/;"	v
mode	neuraloperator/scripts/train_navier_stokes.py	/^        mode="min",$/;"	v
model	FNO script.py	/^model = FNO(n_modes=(16, 16), hidden_channels=64,$/;"	v
model	FNO script.py	/^model = model.to(device)$/;"	v
model	neuraloperator/examples/checkpoint_FNO_darcy.py	/^model = TFNO(n_modes=(16, 16), hidden_channels=32, projection_channels=64, factorization='tucker', rank=0.42)$/;"	v
model	neuraloperator/examples/checkpoint_FNO_darcy.py	/^model = model.to(device)$/;"	v
model	neuraloperator/examples/plot_FNO_darcy.py	/^model = TFNO(n_modes=(16, 16), hidden_channels=32, projection_channels=64, factorization='tucker', rank=0.42)$/;"	v
model	neuraloperator/examples/plot_FNO_darcy.py	/^model = model.to(device)$/;"	v
model	neuraloperator/examples/plot_SFNO_swe.py	/^model = SFNO(n_modes=(32, 32), in_channels=3, out_channels=3, hidden_channels=32, projection_channels=64, factorization='dense')$/;"	v
model	neuraloperator/examples/plot_SFNO_swe.py	/^model = model.to(device)$/;"	v
model	neuraloperator/examples/plot_UNO_darcy.py	/^            horizontal_skips_map = None, n_layers = 5, domain_padding = 0.2)$/;"	v
model	neuraloperator/examples/plot_UNO_darcy.py	/^model = model.to(device)$/;"	v
model	neuraloperator/scripts/test_from_config.py	/^model = get_model(config)$/;"	v
model	neuraloperator/scripts/test_from_config.py	/^model = model.to(device)$/;"	v
model	neuraloperator/scripts/train_burgers.py	/^    model = DDP($/;"	v
model	neuraloperator/scripts/train_burgers.py	/^    model=model,$/;"	v
model	neuraloperator/scripts/train_burgers.py	/^model = get_model(config)$/;"	v
model	neuraloperator/scripts/train_burgers.py	/^model = model.to(device)$/;"	v
model	neuraloperator/scripts/train_darcy.py	/^    model = DDP($/;"	v
model	neuraloperator/scripts/train_darcy.py	/^    model=model,$/;"	v
model	neuraloperator/scripts/train_darcy.py	/^model = get_model(config)$/;"	v
model	neuraloperator/scripts/train_darcy.py	/^model = model.to(device)$/;"	v
model	neuraloperator/scripts/train_navier_stokes.py	/^    model = DDP($/;"	v
model	neuraloperator/scripts/train_navier_stokes.py	/^    model=model,$/;"	v
model	neuraloperator/scripts/train_navier_stokes.py	/^model = get_model(config)$/;"	v
model	neuraloperator/scripts/train_navier_stokes.py	/^model = model.to(device)$/;"	v
mpu	neuraloperator/neuralop/__init__.py	/^from . import mpu$/;"	i
mpu	neuraloperator/neuralop/training/patching.py	/^import neuralop.mpu.comm as comm$/;"	i
mpu	neuraloperator/neuralop/training/torch_setup.py	/^import neuralop.mpu.comm as comm$/;"	i
mpu	neuraloperator/neuralop/training/trainer.py	/^import neuralop.mpu.comm as comm$/;"	i
n_constrs	solve.py	/^                          n_constrs = problem.n_constrs,$/;"	v
n_discretize	problems/problem_darcy_matrix.py	/^    n_discretize = 16$/;"	v	class:DarcyMatrix
n_epochs	neuraloperator/examples/plot_UNO_darcy.py	/^                   n_epochs=20,$/;"	v
n_epochs	neuraloperator/scripts/train_burgers.py	/^    n_epochs=config.opt.n_epochs,$/;"	v
n_epochs	neuraloperator/scripts/train_darcy.py	/^    n_epochs=config.opt.n_epochs,$/;"	v
n_epochs	neuraloperator/scripts/train_navier_stokes.py	/^    n_epochs=config.opt.n_epochs,$/;"	v
n_modes	neuraloperator/neuralop/layers/fno_block.py	/^    def n_modes(self):$/;"	m	class:FNOBlocks
n_modes	neuraloperator/neuralop/layers/fno_block.py	/^    def n_modes(self, n_modes):$/;"	m	class:FNOBlocks
n_modes	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def n_modes(self):$/;"	m	class:SpectralConv
n_modes	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def n_modes(self, n_modes):$/;"	m	class:SpectralConv
n_modes	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def n_modes(self):$/;"	m	class:SphericalConv
n_modes	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def n_modes(self, n_modes):$/;"	m	class:SphericalConv
n_modes	neuraloperator/neuralop/models/fno.py	/^    def n_modes(self):$/;"	m	class:FNO
n_modes	neuraloperator/neuralop/models/fno.py	/^    def n_modes(self, n_modes):$/;"	m	class:FNO
n_parameters	solve.py	/^                          n_parameters = problem.n_parameters, $/;"	v
n_params	FNO script.py	/^n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/examples/checkpoint_FNO_darcy.py	/^n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/examples/plot_FNO_darcy.py	/^n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/examples/plot_SFNO_swe.py	/^n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/examples/plot_UNO_darcy.py	/^n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/scripts/train_burgers.py	/^    n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/scripts/train_darcy.py	/^    n_params = count_model_params(model)$/;"	v
n_params	neuraloperator/scripts/train_navier_stokes.py	/^    n_params = count_model_params(model)$/;"	v
n_test	neuraloperator/neuralop/datasets/darcy.py	/^    n_test = n_tests.pop(idx)$/;"	v
n_tests	neuraloperator/neuralop/datasets/darcy.py	/^        n_tests=n_tests,$/;"	v
n_tests	neuraloperator/scripts/hpo/tune_darcy.py	/^    n_tests=config.data.n_tests,$/;"	v
n_tests	neuraloperator/scripts/train_darcy.py	/^    n_tests=config.data.n_tests,$/;"	v
n_tests	neuraloperator/scripts/train_navier_stokes.py	/^    n_tests=config.data.n_tests,$/;"	v
n_train	neuraloperator/neuralop/datasets/darcy.py	/^        n_train=n_train,$/;"	v
n_train	neuraloperator/scripts/hpo/tune_darcy.py	/^    n_train=config.data.n_train,$/;"	v
n_train	neuraloperator/scripts/train_darcy.py	/^    n_train=config.data.n_train,$/;"	v
n_train	neuraloperator/scripts/train_navier_stokes.py	/^    n_train=config.data.n_train,$/;"	v
name	neuraloperator/scripts/hpo/tune_darcy.py	/^        name=wandb_name,$/;"	v
name	neuraloperator/scripts/train_burgers.py	/^        name=wandb_name,$/;"	v
name	neuraloperator/scripts/train_darcy.py	/^        name=wandb_name,$/;"	v
name	neuraloperator/scripts/train_navier_stokes.py	/^        name=wandb_name,$/;"	v
napoleon_google_docstring	neuraloperator/doc/source/conf.py	/^napoleon_google_docstring = False$/;"	v
napoleon_use_rtype	neuraloperator/doc/source/conf.py	/^napoleon_use_rtype = False$/;"	v
neuralop	neuraloperator/doc/source/conf.py	/^import neuralop$/;"	i
neuralop	neuraloperator/neuralop/training/patching.py	/^import neuralop.mpu.comm as comm$/;"	i
neuralop	neuraloperator/neuralop/training/torch_setup.py	/^import neuralop.mpu.comm as comm$/;"	i
neuralop	neuraloperator/neuralop/training/trainer.py	/^import neuralop.mpu.comm as comm$/;"	i
nn	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/base_spectral_conv.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/embeddings.py	/^import torch.nn as nn$/;"	i
nn	neuraloperator/neuralop/layers/fno_block.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/fno_block.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/layers/fourier_continuation.py	/^import torch.nn as nn$/;"	i
nn	neuraloperator/neuralop/layers/integral_transform.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/integral_transform.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/mlp.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/mlp.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/layers/neighbor_search.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/normalization_layers.py	/^import torch.nn as nn$/;"	i
nn	neuraloperator/neuralop/layers/padding.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/resample.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/layers/skip_connections.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/spectral_convolution.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/layers/spherical_convolution.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/losses/equation_losses.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/models/fno.py	/^import torch.nn as nn$/;"	i
nn	neuraloperator/neuralop/models/fno.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/models/fnogno.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/models/fnogno.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/models/uno.py	/^import torch.nn as nn$/;"	i
nn	neuraloperator/neuralop/models/uno.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/mpu/helpers.py	/^import torch.nn.functional as F$/;"	i
nn	neuraloperator/neuralop/tests/test_utils.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/training/patching.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/training/tests/test_callbacks.py	/^from torch import nn$/;"	i
nn	neuraloperator/neuralop/training/training_state.py	/^from torch import nn$/;"	i
nn	neuraloperator/scripts/train_burgers.py	/^import torch.nn.functional as F$/;"	i
nn	nn_architecture.py	/^import torch.nn as nn$/;"	i
norm	neuraloperator/neuralop/losses/data_losses.py	/^    def norm(self, x, vol_elm):$/;"	m	class:IregularLpqLoss
normalize_wrt_domain	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^    def normalize_wrt_domain(self, u, norm_fn):$/;"	m	class:AttentionKernelIntegral
np	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^import numpy as np$/;"	i
np	neuraloperator/neuralop/datasets/burgers.py	/^import numpy as np$/;"	i
np	neuraloperator/neuralop/layers/fourier_continuation.py	/^import numpy as np$/;"	i
np	neuraloperator/neuralop/layers/resample.py	/^import numpy as np$/;"	i
np	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^import numpy as np$/;"	i
np	problems/problem_base.py	/^import numpy as np$/;"	i
np	problems/problem_darcy.py	/^import numpy as np$/;"	i
np	problems/problem_darcy_matrix.py	/^import numpy as np$/;"	i
np	problems/problem_spring.py	/^import numpy as np$/;"	i
np	solve.py	/^import numpy as np$/;"	i
np	stochasticsqp.py	/^import numpy as np$/;"	i
num_workers	neuraloperator/neuralop/datasets/darcy.py	/^            num_workers=0,$/;"	v
num_workers	neuraloperator/neuralop/datasets/darcy.py	/^        num_workers=0,$/;"	v
num_workers	neuraloperator/scripts/train_navier_stokes.py	/^    num_workers=config.data.num_workers,$/;"	v
numpydoc_class_members_toctree	neuraloperator/doc/source/conf.py	/^numpydoc_class_members_toctree = False$/;"	v
numpydoc_show_class_members	neuraloperator/doc/source/conf.py	/^numpydoc_show_class_members = True$/;"	v
numpydoc_show_inherited_class_members	neuraloperator/doc/source/conf.py	/^numpydoc_show_inherited_class_members = False$/;"	v
objective	neuraloperator/scripts/hpo/tune_darcy.py	/^def objective(trial):$/;"	f
objective_func_and_grad	problems/problem_darcy.py	/^    def objective_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:Darcy
objective_func_and_grad	problems/problem_darcy_matrix.py	/^    def objective_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:DarcyMatrix
objective_func_and_grad	problems/problem_spring.py	/^    def objective_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:Spring
on_batch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_batch_end(self, *args, **kwargs):$/;"	m	class:Callback
on_batch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_batch_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_batch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_batch_start(self, *args, **kwargs):$/;"	m	class:Callback
on_batch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_batch_start(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_batch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_batch_start(self, idx, **kwargs):$/;"	m	class:BasicLoggerCallback
on_before_forward	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_forward(self, *args, **kwargs):$/;"	m	class:Callback
on_before_forward	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_forward(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_before_loss	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_loss(self, *args, **kwargs):$/;"	m	class:Callback
on_before_loss	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_loss(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_before_loss	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_loss(self, out, **kwargs):$/;"	m	class:BasicLoggerCallback
on_before_train	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_train(self, *args, **kwargs):$/;"	m	class:Callback
on_before_train	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_train(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_before_val	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_val(self, *args, **kwargs):$/;"	m	class:Callback
on_before_val	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_val(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_before_val	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_val(self, epoch, train_err, time, avg_loss, avg_lasso_loss, **kwargs):$/;"	m	class:BasicLoggerCallback
on_before_val_loss	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_val_loss(self, **kwargs):$/;"	m	class:Callback
on_before_val_loss	neuraloperator/neuralop/training/callbacks.py	/^    def on_before_val_loss(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_end(self, *args, **kwargs):$/;"	m	class:Callback
on_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_end(self, *args, **kwargs):$/;"	m	class:CheckpointCallback
on_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_start(self, *args, **kwargs):$/;"	m	class:Callback
on_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_start(self, *args, **kwargs):$/;"	m	class:CheckpointCallback
on_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_start(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_epoch_start(self, epoch):$/;"	m	class:BasicLoggerCallback
on_init_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_init_end(self, *args, **kwargs):$/;"	m	class:BasicLoggerCallback
on_init_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_init_end(self, *args, **kwargs):$/;"	m	class:Callback
on_init_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_init_end(self, *args, **kwargs):$/;"	m	class:CheckpointCallback
on_init_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_init_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_init_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_init_start(self, **kwargs):$/;"	m	class:Callback
on_init_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_init_start(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_load_to_device	neuraloperator/neuralop/training/callbacks.py	/^    def on_load_to_device(self, *args, **kwargs):$/;"	m	class:Callback
on_load_to_device	neuraloperator/neuralop/training/callbacks.py	/^    def on_load_to_device(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_train_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_train_end(self, *args, **kwargs):$/;"	m	class:Callback
on_train_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_train_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_train_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_train_start(self, **kwargs):$/;"	m	class:BasicLoggerCallback
on_train_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_train_start(self, *args, **kwargs):$/;"	m	class:Callback
on_train_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_train_start(self, *args, **kwargs):$/;"	m	class:CheckpointCallback
on_train_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_train_start(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_val_batch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_batch_end(self, *args, **kwargs):$/;"	m	class:Callback
on_val_batch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_batch_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_val_batch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_batch_start(self, *args, **kwargs):$/;"	m	class:Callback
on_val_batch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_batch_start(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_val_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_end(self, *args, **kwargs):$/;"	m	class:BasicLoggerCallback
on_val_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_end(self, *args, **kwargs):$/;"	m	class:Callback
on_val_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_val_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_end(self, *args, **kwargs):$/;"	m	class:Callback
on_val_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_end(self, *args, **kwargs):$/;"	m	class:CheckpointCallback
on_val_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_end(self, *args, **kwargs):$/;"	m	class:PipelineCallback
on_val_epoch_end	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_end(self, errors, **kwargs):$/;"	m	class:BasicLoggerCallback
on_val_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_start(self, *args, **kwargs):$/;"	m	class:Callback
on_val_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_start(self, *args, **kwargs):$/;"	m	class:CheckpointCallback
on_val_epoch_start	neuraloperator/neuralop/training/callbacks.py	/^    def on_val_epoch_start(self, *args, **kwargs):$/;"	m	class:PipelineCallback
opt_einsum	neuraloperator/neuralop/layers/einsum_utils.py	/^import opt_einsum$/;"	i
optimizer	FNO script.py	/^              optimizer=optimizer,$/;"	v
optimizer	FNO script.py	/^optimizer = torch.optim.Adam(model.parameters(),$/;"	v
optimizer	neuraloperator/examples/checkpoint_FNO_darcy.py	/^              optimizer=optimizer,$/;"	v
optimizer	neuraloperator/examples/checkpoint_FNO_darcy.py	/^optimizer = torch.optim.Adam(model.parameters(), $/;"	v
optimizer	neuraloperator/examples/plot_FNO_darcy.py	/^              optimizer=optimizer,$/;"	v
optimizer	neuraloperator/examples/plot_FNO_darcy.py	/^optimizer = torch.optim.Adam(model.parameters(), $/;"	v
optimizer	neuraloperator/examples/plot_SFNO_swe.py	/^              optimizer=optimizer,$/;"	v
optimizer	neuraloperator/examples/plot_SFNO_swe.py	/^optimizer = torch.optim.Adam(model.parameters(), $/;"	v
optimizer	neuraloperator/examples/plot_UNO_darcy.py	/^              optimizer=optimizer,$/;"	v
optimizer	neuraloperator/examples/plot_UNO_darcy.py	/^optimizer = torch.optim.Adam(model.parameters(), $/;"	v
optimizer	neuraloperator/scripts/train_burgers.py	/^optimizer = torch.optim.Adam($/;"	v
optimizer	neuraloperator/scripts/train_darcy.py	/^    optimizer=optimizer,$/;"	v
optimizer	neuraloperator/scripts/train_darcy.py	/^optimizer = torch.optim.Adam($/;"	v
optimizer	neuraloperator/scripts/train_navier_stokes.py	/^optimizer = torch.optim.Adam($/;"	v
optimizer	solve.py	/^    optimizer = StochasticSQP(problem.net.parameters(),$/;"	v
optuna	neuraloperator/scripts/hpo/tune_darcy.py	/^import optuna$/;"	i
os	FNO script.py	/^import os$/;"	i
os	neuraloperator/neuralop/mpu/comm.py	/^import os$/;"	i
os	neuraloperator/neuralop/tests/test_utils.py	/^import os$/;"	i
os	neuraloperator/neuralop/training/callbacks.py	/^import os$/;"	i
os	neuraloperator/neuralop/training/tests/test_callbacks.py	/^import os$/;"	i
os	neuraloperator/neuralop/utils.py	/^    import os$/;"	i
os	solve.py	/^import os$/;"	i
out	FNO script.py	/^    out = model(x.unsqueeze(0))$/;"	v
out	neuraloperator/examples/plot_FNO_darcy.py	/^    out = model(x.unsqueeze(0))$/;"	v
out	neuraloperator/examples/plot_SFNO_swe.py	/^    out = model(x_in).squeeze()[0, ...].detach().cpu().numpy()$/;"	v
out	neuraloperator/examples/plot_UNO_darcy.py	/^    out = model(x.unsqueeze(0).to(device)).cpu()$/;"	v
out	neuraloperator/scripts/test_from_config.py	/^out = model(in_data)$/;"	v
out_normalizer	neuraloperator/neuralop/datasets/darcy.py	/^        out_normalizer=output_encoder,$/;"	v
out_normalizer	neuraloperator/scripts/train_burgers.py	/^                                       out_normalizer=output_encoder)$/;"	v
out_normalizer	neuraloperator/scripts/train_darcy.py	/^                                             out_normalizer=data_processor.out_normalizer,$/;"	v
out_normalizer	neuraloperator/scripts/train_navier_stokes.py	/^                                             out_normalizer=data_processor.out_normalizer,$/;"	v
output_encoder	neuraloperator/neuralop/datasets/darcy.py	/^        output_encoder = None$/;"	v
output_encoder	neuraloperator/neuralop/datasets/darcy.py	/^        output_encoder = UnitGaussianNormalizer(dim=reduce_dims)$/;"	v
pad	neuraloperator/neuralop/layers/padding.py	/^    def pad(self, x, verbose=False):$/;"	m	class:DomainPadding
pad	neuraloperator/scripts/train_burgers.py	/^        pad=config.data.get("pad", 0), temporal_subsample=config.data.get("temporal_subsample", 1),$/;"	v
pad_helper	neuraloperator/neuralop/mpu/helpers.py	/^def pad_helper(tensor, dim, new_size, mode="zero"):$/;"	f
padding_fraction	neuraloperator/scripts/train_burgers.py	/^                                       padding_fraction=config.patching.padding,$/;"	v
padding_fraction	neuraloperator/scripts/train_darcy.py	/^                                             padding_fraction=config.patching.padding,$/;"	v
padding_fraction	neuraloperator/scripts/train_navier_stokes.py	/^                                             padding_fraction=config.patching.padding,$/;"	v
partial_fit	neuraloperator/neuralop/datasets/output_encoder.py	/^    def partial_fit(self, data_batch, batch_size=1):$/;"	m	class:UnitGaussianNormalizer
partialclass	neuraloperator/neuralop/models/fno.py	/^def partialclass(new_name, cls, *args, **kwargs):$/;"	f
partialmethod	neuraloperator/neuralop/models/fno.py	/^from functools import partialmethod$/;"	i
patch	neuraloperator/neuralop/training/patching.py	/^    def patch(self, x, y):$/;"	m	class:MultigridPatching2D
path	neuraloperator/neuralop/datasets/darcy.py	/^    path = Path(__file__).resolve().parent.joinpath("data")$/;"	v
pathlib	neuraloperator/neuralop/training/trainer.py	/^import pathlib$/;"	i
patience	neuraloperator/scripts/train_burgers.py	/^        patience=config.opt.scheduler_patience,$/;"	v
patience	neuraloperator/scripts/train_darcy.py	/^        patience=config.opt.scheduler_patience,$/;"	v
patience	neuraloperator/scripts/train_navier_stokes.py	/^        patience=config.opt.scheduler_patience,$/;"	v
pde_model	FNO dataset.py	/^def pde_model(train_sample):$/;"	f
persistent_workers	neuraloperator/neuralop/datasets/darcy.py	/^            persistent_workers=False,$/;"	v
persistent_workers	neuraloperator/neuralop/datasets/darcy.py	/^        persistent_workers=False,$/;"	v
persistent_workers	neuraloperator/scripts/train_navier_stokes.py	/^    persistent_workers=config.data.persistent_workers,$/;"	v
pin_memory	neuraloperator/neuralop/datasets/darcy.py	/^            pin_memory=True,$/;"	v
pin_memory	neuraloperator/neuralop/datasets/darcy.py	/^        pin_memory=True,$/;"	v
pin_memory	neuraloperator/scripts/train_navier_stokes.py	/^    pin_memory=config.data.pin_memory,$/;"	v
pipe	neuraloperator/scripts/hpo/tune_darcy.py	/^pipe = ConfigPipeline($/;"	v
pipe	neuraloperator/scripts/test_from_config.py	/^pipe = ConfigPipeline([YamlConfig('.\/test_config.yaml', config_name='default', config_folder='..\/config'),$/;"	v
pipe	neuraloperator/scripts/train_burgers.py	/^pipe = ConfigPipeline($/;"	v
pipe	neuraloperator/scripts/train_darcy.py	/^pipe = ConfigPipeline($/;"	v
pipe	neuraloperator/scripts/train_navier_stokes.py	/^pipe = ConfigPipeline($/;"	v
plt	FNO script.py	/^import matplotlib.pyplot as plt$/;"	i
plt	neuraloperator/examples/checkpoint_FNO_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
plt	neuraloperator/examples/plot_FNO_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
plt	neuraloperator/examples/plot_SFNO_swe.py	/^import matplotlib.pyplot as plt$/;"	i
plt	neuraloperator/examples/plot_UNO_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
plt	neuraloperator/examples/plot_darcy_flow.py	/^import matplotlib.pyplot as plt$/;"	i
plt	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^import matplotlib.pyplot as plt$/;"	i
pos_encoding	neuraloperator/neuralop/datasets/darcy.py	/^        pos_encoding = None$/;"	v
pos_encoding	neuraloperator/neuralop/datasets/darcy.py	/^        pos_encoding = PositionalEmbedding2D(grid_boundaries=grid_boundaries)$/;"	v
positional_encoding	FNO dataset.py	/^        positional_encoding=True$/;"	v
positional_encoding	FNO script.py	/^        positional_encoding=True$/;"	v
positional_encoding	neuraloperator/examples/plot_FNO_darcy.py	/^        positional_encoding=True$/;"	v
positional_encoding	neuraloperator/neuralop/datasets/darcy.py	/^        positional_encoding=pos_encoding$/;"	v
positional_encoding	neuraloperator/neuralop/datasets/darcy.py	/^        positional_encoding=positional_encoding,$/;"	v
positional_encoding	neuraloperator/scripts/hpo/tune_darcy.py	/^    positional_encoding=config.data.positional_encoding,$/;"	v
positional_encoding	neuraloperator/scripts/train_darcy.py	/^                                             positional_encoding=data_processor.positional_encoding,$/;"	v
positional_encoding	neuraloperator/scripts/train_darcy.py	/^    positional_encoding=config.data.positional_encoding,$/;"	v
positional_encoding	neuraloperator/scripts/train_navier_stokes.py	/^                                             positional_encoding=data_processor.positional_encoding,$/;"	v
positional_encoding	neuraloperator/scripts/train_navier_stokes.py	/^    positional_encoding=config.data.positional_encoding,$/;"	v
postprocess	neuraloperator/neuralop/datasets/data_transforms.py	/^    def postprocess(self, out, data_dict):$/;"	m	class:MGPatchingDataProcessor
postprocess	neuraloperator/neuralop/datasets/data_transforms.py	/^    def postprocess(self, output, data_dict):$/;"	m	class:DefaultDataProcessor
preprocess	neuraloperator/neuralop/datasets/data_transforms.py	/^    def preprocess(self, data_dict, batched=True):$/;"	m	class:DefaultDataProcessor
preprocess	neuraloperator/neuralop/datasets/data_transforms.py	/^    def preprocess(self, data_dict, batched=True):$/;"	m	class:MGPatchingDataProcessor
pressure_drag	neuraloperator/neuralop/losses/data_losses.py	/^def pressure_drag(pressure, vol_elm, inward_surface_normal, $/;"	f
printerHeader	stochasticsqp.py	/^    def printerHeader(self):$/;"	m	class:StochasticSQP
printerIteration	stochasticsqp.py	/^    def printerIteration(self,every=1):$/;"	m	class:StochasticSQP
problem	solve.py	/^                          problem = problem$/;"	v
problem	solve.py	/^    problem = all_problems[problem_name](device, n_obj_sample = 100, n_constrs = 0)    $/;"	v
problem_name	solve.py	/^    problem_name = "DarcyMatrix" #"Spring" #sys.argv[1]$/;"	v
prod	neuraloperator/neuralop/models/tests/test_fno.py	/^from math import prod$/;"	i
prod	neuraloperator/neuralop/utils.py	/^from math import prod$/;"	i
project	neuraloperator/doc/source/conf.py	/^project = 'neuraloperator'$/;"	v
project	neuraloperator/scripts/hpo/tune_darcy.py	/^        project=config.wandb.project,$/;"	v
project	neuraloperator/scripts/train_burgers.py	/^        project=config.wandb.project,$/;"	v
project	neuraloperator/scripts/train_darcy.py	/^        project=config.wandb.project,$/;"	v
project	neuraloperator/scripts/train_navier_stokes.py	/^        project=config.wandb.project,$/;"	v
pytest	neuraloperator/neuralop/layers/tests/test_attention_layer.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/layers/tests/test_fno_block.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/layers/tests/test_padding.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/models/tests/test_fno.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/models/tests/test_fnogno.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/models/tests/test_uno.py	/^import pytest$/;"	i
pytest	neuraloperator/neuralop/tests/test_utils.py	/^import pytest$/;"	i
random	problems/problem_darcy.py	/^import random$/;"	i
random	problems/problem_darcy_matrix.py	/^import random$/;"	i
ratio_param_init	solve.py	/^                          ratio_param_init = 1,$/;"	v
re	neuraloperator/setup.py	/^import re$/;"	i
readme	neuraloperator/setup.py	/^def readme(root_path):$/;"	f
reduce_all	neuraloperator/neuralop/losses/data_losses.py	/^    def reduce_all(self, x):$/;"	m	class:H1Loss
reduce_all	neuraloperator/neuralop/losses/data_losses.py	/^    def reduce_all(self, x):$/;"	m	class:LpLoss
reduce_dims	neuraloperator/neuralop/datasets/darcy.py	/^            reduce_dims = [0]$/;"	v
reduce_dims	neuraloperator/neuralop/datasets/darcy.py	/^            reduce_dims = list(range(x_train.ndim))$/;"	v
reduce_dims	neuraloperator/neuralop/datasets/darcy.py	/^            reduce_dims = list(range(y_train.ndim))$/;"	v
reduce_from_model_parallel_region	neuraloperator/neuralop/mpu/mappings.py	/^def reduce_from_model_parallel_region(input_):$/;"	f
regular_grid	neuraloperator/neuralop/datasets/transforms.py	/^def regular_grid(spatial_dims, grid_boundaries=[[0, 1], [0, 1]]):$/;"	f
regularizer	FNO script.py	/^              regularizer=False,$/;"	v
regularizer	neuraloperator/examples/checkpoint_FNO_darcy.py	/^              regularizer=False, $/;"	v
regularizer	neuraloperator/examples/plot_FNO_darcy.py	/^              regularizer=False, $/;"	v
regularizer	neuraloperator/examples/plot_SFNO_swe.py	/^              regularizer=False, $/;"	v
regularizer	neuraloperator/examples/plot_UNO_darcy.py	/^              regularizer=False, $/;"	v
regularizer	neuraloperator/scripts/train_burgers.py	/^    regularizer=False,$/;"	v
regularizer	neuraloperator/scripts/train_darcy.py	/^    regularizer=False,$/;"	v
regularizer	neuraloperator/scripts/train_navier_stokes.py	/^    regularizer=False,$/;"	v
rel	neuraloperator/neuralop/losses/data_losses.py	/^    def rel(self, x, y):$/;"	m	class:LpLoss
rel	neuraloperator/neuralop/losses/data_losses.py	/^    def rel(self, x, y, h=None):$/;"	m	class:H1Loss
rel	neuraloperator/neuralop/losses/data_losses.py	/^    def rel(self, x, y, vol_elm):$/;"	m	class:IregularLpqLoss
release	neuraloperator/doc/source/conf.py	/^release = neuralop.__version__$/;"	v
required	stochasticsqp.py	/^from torch.optim.optimizer import Optimizer, required$/;"	i
resample	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from .resample import resample$/;"	i
resample	neuraloperator/neuralop/layers/resample.py	/^def resample(x, res_scale, axis, output_shape=None):$/;"	f
resample	neuraloperator/neuralop/layers/spectral_convolution.py	/^from .resample import resample$/;"	i
resample	neuraloperator/neuralop/layers/tests/test_resample.py	/^from ..resample import resample$/;"	i
resample	neuraloperator/neuralop/models/uno.py	/^from ..layers.resample import resample$/;"	i
resnet18	Test file.py	/^from torchvision.models import resnet18, ResNet18_Weights$/;"	i
resume_from_dir	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                                            resume_from_dir='.\/checkpoints\/ep_10')$/;"	v
root_path	neuraloperator/setup.py	/^root_path = Path(__file__).parent$/;"	v
rotate_half	neuraloperator/neuralop/layers/embeddings.py	/^def rotate_half(x):$/;"	f
run	solve.py	/^def run(optimizer, problem, max_iter = 10000, save_every=10):$/;"	f
s	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^s = 16 # resolution of the dataset$/;"	v
samples	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^samples = 50$/;"	v
save_checkpoint	neuraloperator/neuralop/models/base_model.py	/^    def save_checkpoint(self, save_folder, save_name):$/;"	m	class:BaseModel
save_interval	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                                       save_interval=10,$/;"	v
save_net	problems/problem_darcy_matrix.py	/^    def save_net(self,path):$/;"	m	class:DarcyMatrix
save_optimizer	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                                            save_optimizer=True,$/;"	v
save_scheduler	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                                            save_scheduler=True)$/;"	v
save_training_state	neuraloperator/neuralop/training/__init__.py	/^from .training_state import load_training_state, save_training_state/;"	i
save_training_state	neuraloperator/neuralop/training/callbacks.py	/^from .training_state import save_training_state$/;"	i
save_training_state	neuraloperator/neuralop/training/training_state.py	/^def save_training_state(save_dir: Union[str, Path], save_name: str,$/;"	f
scatter_segment_csr	neuraloperator/neuralop/layers/segment_csr.py	/^        import torch_scatter.segment_csr as scatter_segment_csr$/;"	i
scatter_to_model_parallel_region	neuraloperator/neuralop/mpu/mappings.py	/^def scatter_to_model_parallel_region(input_, dim):$/;"	f
scheduler	FNO script.py	/^              scheduler=scheduler,$/;"	v
scheduler	FNO script.py	/^scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)$/;"	v
scheduler	neuraloperator/examples/checkpoint_FNO_darcy.py	/^              scheduler=scheduler, $/;"	v
scheduler	neuraloperator/examples/checkpoint_FNO_darcy.py	/^scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)$/;"	v
scheduler	neuraloperator/examples/plot_FNO_darcy.py	/^              scheduler=scheduler, $/;"	v
scheduler	neuraloperator/examples/plot_FNO_darcy.py	/^scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)$/;"	v
scheduler	neuraloperator/examples/plot_SFNO_swe.py	/^              scheduler=scheduler, $/;"	v
scheduler	neuraloperator/examples/plot_SFNO_swe.py	/^scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)$/;"	v
scheduler	neuraloperator/examples/plot_UNO_darcy.py	/^              scheduler=scheduler, $/;"	v
scheduler	neuraloperator/examples/plot_UNO_darcy.py	/^scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)$/;"	v
scheduler	neuraloperator/scripts/train_burgers.py	/^    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR($/;"	v
scheduler	neuraloperator/scripts/train_burgers.py	/^    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau($/;"	v
scheduler	neuraloperator/scripts/train_burgers.py	/^    scheduler = torch.optim.lr_scheduler.StepLR($/;"	v
scheduler	neuraloperator/scripts/train_darcy.py	/^    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR($/;"	v
scheduler	neuraloperator/scripts/train_darcy.py	/^    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau($/;"	v
scheduler	neuraloperator/scripts/train_darcy.py	/^    scheduler = torch.optim.lr_scheduler.StepLR($/;"	v
scheduler	neuraloperator/scripts/train_darcy.py	/^    scheduler=scheduler,$/;"	v
scheduler	neuraloperator/scripts/train_navier_stokes.py	/^    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR($/;"	v
scheduler	neuraloperator/scripts/train_navier_stokes.py	/^    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau($/;"	v
scheduler	neuraloperator/scripts/train_navier_stokes.py	/^    scheduler = torch.optim.lr_scheduler.StepLR($/;"	v
second_grad	Test file.py	/^second_grad = torch.autograd.grad(outputs=grad_sum[1].sum(), inputs= b, create_graph=True)[0]$/;"	v
second_grad	Test file.py	/^second_grad = torch.autograd.grad(outputs=grad_sum[1].sum(), inputs= b1, create_graph=True)[0]$/;"	v
second_grad0	Test file.py	/^second_grad0 = torch.autograd.grad(outputs=grad_sum[0].sum(), inputs= a, create_graph=True)[0]$/;"	v
second_grad0	Test file.py	/^second_grad0 = torch.autograd.grad(outputs=grad_sum[0].sum(), inputs= a1, create_graph=True)[0]$/;"	v
segment_csr	neuraloperator/neuralop/layers/integral_transform.py	/^from .segment_csr import segment_csr$/;"	i
segment_csr	neuraloperator/neuralop/layers/segment_csr.py	/^def segment_csr(src: torch.Tensor, indptr: torch.Tensor, reduce: Literal['mean', 'sum'], use_scatter=True):$/;"	f
set_ada_in_embeddings	neuraloperator/neuralop/layers/fno_block.py	/^    def set_ada_in_embeddings(self, *embeddings):$/;"	m	class:FNOBlocks
set_constraint_pixel_idx	problems/problem_darcy_matrix.py	/^    def set_constraint_pixel_idx(self):$/;"	m	class:DarcyMatrix
set_embedding	neuraloperator/neuralop/layers/normalization_layers.py	/^    def set_embedding(self, x):$/;"	m	class:AdaIN
set_initial_condition	neuraloperator/neuralop/datasets/spherical_swe.py	/^    def set_initial_condition(self, ictype='random'):$/;"	m	class:SphericalSWEDataset
set_num_examples	neuraloperator/neuralop/datasets/spherical_swe.py	/^    def set_num_examples(self, num_examples=32):$/;"	m	class:SphericalSWEDataset
set_wandb_api_key	neuraloperator/neuralop/utils.py	/^def set_wandb_api_key(api_key_file="..\/config\/wandb_api_key.txt"):$/;"	f
setup	neuraloperator/neuralop/training/__init__.py	/^from .torch_setup import setup$/;"	i
setup	neuraloperator/neuralop/training/torch_setup.py	/^def setup(config):$/;"	f
setup	neuraloperator/scripts/hpo/tune_darcy.py	/^from neuralop.training import setup$/;"	i
setup	neuraloperator/scripts/train_burgers.py	/^from neuralop.training import setup, BasicLoggerCallback$/;"	i
setup	neuraloperator/scripts/train_darcy.py	/^from neuralop.training import setup$/;"	i
setup	neuraloperator/scripts/train_navier_stokes.py	/^from neuralop.training import setup, BasicLoggerCallback$/;"	i
setup	neuraloperator/setup.py	/^    from distutils.core import setup, find_packages$/;"	i
setup	neuraloperator/setup.py	/^    from setuptools import setup, find_packages$/;"	i
shape	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^shape = dataset_pred.shape$/;"	v
sht	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def sht(self, x, s=None, norm="ortho", grid="equiangular"):$/;"	m	class:SHT
shuffle	neuraloperator/neuralop/datasets/darcy.py	/^            shuffle=False,$/;"	v
shuffle	neuraloperator/neuralop/datasets/darcy.py	/^        shuffle=False,$/;"	v
shuffle	neuraloperator/neuralop/datasets/darcy.py	/^        shuffle=True,$/;"	v
shutil	neuraloperator/neuralop/training/tests/test_callbacks.py	/^import shutil$/;"	i
sigma	stochasticsqp.py	/^    sigma=0.5$/;"	v	class:StochasticSQP
simple_neighbor_search	neuraloperator/neuralop/layers/neighbor_search.py	/^            from .simple_neighbor_search import simple_neighbor_search$/;"	i
simple_neighbor_search	neuraloperator/neuralop/layers/simple_neighbor_search.py	/^def simple_neighbor_search(data: torch.Tensor, queries: torch.Tensor, radius: float):$/;"	f
simple_neighbor_search	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^from ..simple_neighbor_search import simple_neighbor_search$/;"	i
size	neuraloperator/scripts/test_from_config.py	/^size = config.data.size$/;"	v
skip_connection	neuraloperator/neuralop/layers/fno_block.py	/^from .skip_connections import skip_connection$/;"	i
skip_connection	neuraloperator/neuralop/layers/skip_connections.py	/^def skip_connection($/;"	f
skip_connection	neuraloperator/neuralop/models/uno.py	/^from ..layers.skip_connections import skip_connection$/;"	i
socket	neuraloperator/neuralop/mpu/comm.py	/^        import socket$/;"	i
spatial_subsample	neuraloperator/scripts/train_burgers.py	/^        spatial_subsample=config.data.get("spatial_subsample", 1),$/;"	v
spectrum_2d	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^from neuralop.utils import spectrum_2d$/;"	i
spectrum_2d	neuraloperator/neuralop/utils.py	/^def spectrum_2d(signal, n_observations, normalize=True):$/;"	f
sphinx_gallery_conf	neuraloperator/doc/source/conf.py	/^sphinx_gallery_conf = {$/;"	v
split_tensor_along_dim	neuraloperator/neuralop/mpu/helpers.py	/^def split_tensor_along_dim(tensor, dim, num_chunks):$/;"	f
split_tensor_along_dim	neuraloperator/neuralop/mpu/mappings.py	/^from .helpers import split_tensor_along_dim$/;"	i
splits	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^splits = [0, 3, 7, 11, 15, 18, 22, 27, 32, 37, 41, 45, 50,$/;"	v
step	stochasticsqp.py	/^    def step(self, closure=None):$/;"	m	class:StochasticSQP
step_opt	solve.py	/^                          step_opt= 2,$/;"	v
stitching	neuraloperator/scripts/train_burgers.py	/^                                       stitching=config.patching.stitching,$/;"	v
stitching	neuraloperator/scripts/train_darcy.py	/^                                             stitching=config.patching.stitching,$/;"	v
stitching	neuraloperator/scripts/train_navier_stokes.py	/^                                             stitching=config.patching.stitching,$/;"	v
study	neuraloperator/scripts/hpo/tune_darcy.py	/^study = optuna.create_study()$/;"	v
symbolic	neuraloperator/neuralop/mpu/mappings.py	/^    def symbolic(graph, input_):$/;"	m	class:_CopyToModelParallelRegion
symbolic	neuraloperator/neuralop/mpu/mappings.py	/^    def symbolic(graph, input_):$/;"	m	class:_ReduceFromModelParallelRegion
symbolic	neuraloperator/neuralop/mpu/mappings.py	/^    def symbolic(graph, input_, dim_):$/;"	m	class:_GatherFromModelParallelRegion
symbolic	neuraloperator/neuralop/mpu/mappings.py	/^    def symbolic(graph, input_, dim_):$/;"	m	class:_ScatterToModelParallelRegion
sys	FNO script.py	/^import sys$/;"	i
sys	neuraloperator/examples/checkpoint_FNO_darcy.py	/^import sys$/;"	i
sys	neuraloperator/examples/plot_FNO_darcy.py	/^import sys$/;"	i
sys	neuraloperator/examples/plot_SFNO_swe.py	/^import sys$/;"	i
sys	neuraloperator/examples/plot_UNO_darcy.py	/^import sys$/;"	i
sys	neuraloperator/neuralop/training/callbacks.py	/^import sys$/;"	i
sys	neuraloperator/scripts/hpo/tune_darcy.py	/^import sys$/;"	i
sys	neuraloperator/scripts/train_burgers.py	/^import sys$/;"	i
sys	neuraloperator/scripts/train_darcy.py	/^import sys$/;"	i
sys	neuraloperator/scripts/train_navier_stokes.py	/^import sys$/;"	i
sys	solve.py	/^import sys$/;"	i
t	neuraloperator/scripts/test_from_config.py	/^t = time.time() - t1$/;"	v
t1	neuraloperator/scripts/test_from_config.py	/^t1 = time.time()$/;"	v
templates_path	neuraloperator/doc/source/conf.py	/^templates_path = ['_templates']$/;"	v
tenalg	neuraloperator/neuralop/models/tests/test_fno.py	/^from tensorly import tenalg$/;"	i
tenalg	neuraloperator/neuralop/models/tests/test_fnogno.py	/^from tensorly import tenalg$/;"	i
tenalg	neuraloperator/neuralop/tests/test_model_from_config.py	/^from tensorly import tenalg$/;"	i
tenalg	neuraloperator/scripts/test_from_config.py	/^from tensorly import tenalg$/;"	i
test_ArgparseConfig	neuraloperator/neuralop/tests/test_utils.py	/^def test_ArgparseConfig(monkeypatch):$/;"	f
test_AttentionWithRoPE	neuraloperator/neuralop/layers/tests/test_attention_layer.py	/^def test_AttentionWithRoPE():$/;"	f
test_DefaultDataProcessor	neuraloperator/neuralop/datasets/tests/test_data_processor.py	/^def test_DefaultDataProcessor():$/;"	f
test_DomainPadding	neuraloperator/neuralop/layers/tests/test_padding.py	/^def test_DomainPadding(mode):$/;"	f
test_FNOBlock_norm	neuraloperator/neuralop/layers/tests/test_fno_block.py	/^def test_FNOBlock_norm(norm):$/;"	f
test_FNOBlock_output_scaling_factor	neuraloperator/neuralop/layers/tests/test_fno_block.py	/^def test_FNOBlock_output_scaling_factor():$/;"	f
test_SpectralConv	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^def test_SpectralConv(factorization, implementation):$/;"	f
test_SpectralConv	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^def test_SpectralConv(factorization, implementation):$/;"	f
test_SpectralConv1D	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^def test_SpectralConv1D(factorization, implementation):$/;"	f
test_SpectralConv1D	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^def test_SpectralConv1D(factorization, implementation):$/;"	f
test_SpectralConv2D	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^def test_SpectralConv2D(factorization, implementation):$/;"	f
test_SpectralConv2D	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^def test_SpectralConv2D(factorization, implementation):$/;"	f
test_SpectralConv3D	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^def test_SpectralConv3D(factorization, implementation):$/;"	f
test_SpectralConv3D	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^def test_SpectralConv3D(factorization, implementation):$/;"	f
test_SpectralConv_output_scaling_factor	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^def test_SpectralConv_output_scaling_factor():$/;"	f
test_SpectralConv_output_scaling_factor	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^def test_SpectralConv_output_scaling_factor():$/;"	f
test_SphericalConv	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^def test_SphericalConv(factorization, implementation):$/;"	f
test_UNO	neuraloperator/neuralop/models/tests/test_uno.py	/^def test_UNO(input_shape):$/;"	f
test_UnitGaussianNormalizer	neuraloperator/neuralop/datasets/tests/test_output_encoder.py	/^def test_UnitGaussianNormalizer():$/;"	f
test_batch_size	neuraloperator/neuralop/datasets/darcy.py	/^    test_batch_size = test_batch_sizes.pop(idx)$/;"	v
test_batch_sizes	FNO dataset.py	/^        test_batch_sizes=[32, 32],$/;"	v
test_batch_sizes	FNO script.py	/^        test_batch_sizes=[32, 32],$/;"	v
test_batch_sizes	neuraloperator/examples/checkpoint_FNO_darcy.py	/^        test_batch_sizes=[32, 32],$/;"	v
test_batch_sizes	neuraloperator/examples/plot_FNO_darcy.py	/^        test_batch_sizes=[32, 32],$/;"	v
test_batch_sizes	neuraloperator/examples/plot_UNO_darcy.py	/^        test_batch_sizes=[32, 32],$/;"	v
test_batch_sizes	neuraloperator/neuralop/datasets/darcy.py	/^        test_batch_sizes=test_batch_sizes,$/;"	v
test_batch_sizes	neuraloperator/scripts/hpo/tune_darcy.py	/^    test_batch_sizes=config.data.test_batch_sizes,$/;"	v
test_batch_sizes	neuraloperator/scripts/train_darcy.py	/^    test_batch_sizes=config.data.test_batch_sizes,$/;"	v
test_batch_sizes	neuraloperator/scripts/train_navier_stokes.py	/^    test_batch_sizes=config.data.test_batch_sizes,$/;"	v
test_count_model_params	neuraloperator/neuralop/tests/test_utils.py	/^def test_count_model_params():$/;"	f
test_count_tensor_params	neuraloperator/neuralop/tests/test_utils.py	/^def test_count_tensor_params():$/;"	f
test_db	neuraloperator/neuralop/datasets/darcy.py	/^        test_db = TensorDataset($/;"	v
test_db	neuraloperator/neuralop/datasets/darcy.py	/^    test_db = TensorDataset($/;"	v
test_fallback_nb_search	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^def test_fallback_nb_search():$/;"	f
test_fno_superresolution	neuraloperator/neuralop/models/tests/test_fno.py	/^def test_fno_superresolution(output_scaling_factor):$/;"	f
test_fnogno	neuraloperator/neuralop/models/tests/test_fnogno.py	/^def test_fnogno(gno_transform_type, fno_n_modes):$/;"	f
test_from_config	neuraloperator/neuralop/tests/test_model_from_config.py	/^def test_from_config():$/;"	f
test_get_wandb_api_key	neuraloperator/neuralop/tests/test_utils.py	/^def test_get_wandb_api_key():$/;"	f
test_load_from_checkpoint	neuraloperator/neuralop/training/tests/test_callbacks.py	/^def test_load_from_checkpoint():$/;"	f
test_loader	neuraloperator/neuralop/datasets/darcy.py	/^        test_loader = torch.utils.data.DataLoader($/;"	v
test_loader	neuraloperator/neuralop/datasets/darcy.py	/^    test_loader = torch.utils.data.DataLoader($/;"	v
test_loaders	FNO script.py	/^              test_loaders=test_loaders,$/;"	v
test_loaders	neuraloperator/examples/checkpoint_FNO_darcy.py	/^              test_loaders={},$/;"	v
test_loaders	neuraloperator/examples/plot_FNO_darcy.py	/^              test_loaders=test_loaders,$/;"	v
test_loaders	neuraloperator/examples/plot_SFNO_swe.py	/^              test_loaders=test_loaders,$/;"	v
test_loaders	neuraloperator/examples/plot_UNO_darcy.py	/^              test_loaders=test_loaders,$/;"	v
test_loaders	neuraloperator/neuralop/datasets/darcy.py	/^    test_loaders = {train_resolution: test_loader}$/;"	v
test_loaders	neuraloperator/scripts/train_darcy.py	/^    test_loaders=test_loaders,$/;"	v
test_model_checkpoint_and_resume	neuraloperator/neuralop/training/tests/test_callbacks.py	/^def test_model_checkpoint_and_resume():$/;"	f
test_model_checkpoint_saves	neuraloperator/neuralop/training/tests/test_callbacks.py	/^def test_model_checkpoint_saves():$/;"	f
test_resample	neuraloperator/neuralop/layers/tests/test_resample.py	/^def test_resample():$/;"	f
test_resolutions	neuraloperator/examples/plot_SFNO_swe.py	/^                                                test_resolutions=[(32, 64), (64, 128)], n_tests=[50, 50], test_batch_sizes=[10, 10],)$/;"	v
test_resolutions	neuraloperator/neuralop/datasets/darcy.py	/^        test_resolutions=test_resolutions,$/;"	v
test_resolutions	neuraloperator/scripts/hpo/tune_darcy.py	/^    test_resolutions=config.data.test_resolutions,$/;"	v
test_resolutions	neuraloperator/scripts/train_darcy.py	/^    test_resolutions=config.data.test_resolutions,$/;"	v
test_resolutions	neuraloperator/scripts/train_navier_stokes.py	/^    test_resolutions=config.data.test_resolutions,$/;"	v
test_samples	FNO script.py	/^test_samples = test_loaders[16].dataset$/;"	v
test_samples	neuraloperator/examples/plot_FNO_darcy.py	/^test_samples = test_loaders[32].dataset$/;"	v
test_samples	neuraloperator/examples/plot_SFNO_swe.py	/^    test_samples = test_loaders[resolution].dataset$/;"	v
test_samples	neuraloperator/examples/plot_UNO_darcy.py	/^test_samples = test_loaders[32].dataset$/;"	v
test_sht	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^def test_sht(grid):$/;"	f
test_tfno	neuraloperator/neuralop/models/tests/test_fno.py	/^def test_tfno($/;"	f
time	neuraloperator/neuralop/models/tests/test_uno.py	/^import time$/;"	i
time	neuraloperator/neuralop/tests/test_model_from_config.py	/^import time$/;"	i
time	neuraloperator/scripts/test_from_config.py	/^import time$/;"	i
tl	neuraloperator/neuralop/layers/einsum_utils.py	/^import tensorly as tl$/;"	i
tl	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^import tensorly as tl$/;"	i
tl	neuraloperator/neuralop/layers/spectral_convolution.py	/^import tensorly as tl$/;"	i
tl	neuraloperator/neuralop/layers/spherical_convolution.py	/^import tensorly as tl$/;"	i
to	neuraloperator/neuralop/datasets/data_transforms.py	/^    def to(self, device):$/;"	m	class:DefaultDataProcessor
to	neuraloperator/neuralop/datasets/data_transforms.py	/^    def to(self, device):$/;"	m	class:MGPatchingDataProcessor
to	neuraloperator/neuralop/datasets/output_encoder.py	/^    def to(self, device):$/;"	m	class:DictTransform
to	neuraloperator/neuralop/datasets/output_encoder.py	/^    def to(self, device):$/;"	m	class:MultipleFieldOutputEncoder
to	neuraloperator/neuralop/datasets/output_encoder.py	/^    def to(self, device):$/;"	m	class:OutputEncoder
to	neuraloperator/neuralop/datasets/output_encoder.py	/^    def to(self, device):$/;"	m	class:UnitGaussianNormalizer
to	neuraloperator/neuralop/datasets/transforms.py	/^    def to(self, _):$/;"	m	class:MGPatchingTransform
to	neuraloperator/neuralop/datasets/transforms.py	/^    def to(self, device):$/;"	m	class:Composite
to	neuraloperator/neuralop/datasets/transforms.py	/^    def to(self, device):$/;"	m	class:Transform
to	neuraloperator/neuralop/utils.py	/^    def to(self, device):$/;"	m	class:UnitGaussianNormalizer
to_log	neuraloperator/scripts/train_burgers.py	/^        to_log = {"n_params": n_params}$/;"	v
to_log	neuraloperator/scripts/train_darcy.py	/^        to_log = {"n_params": n_params}$/;"	v
to_log	neuraloperator/scripts/train_navier_stokes.py	/^        to_log = {"n_params": n_params}$/;"	v
torch	FNO dataset.py	/^import torch$/;"	i
torch	FNO script.py	/^import torch$/;"	i
torch	Test file.py	/^import torch$/;"	i
torch	neuraloperator/examples/checkpoint_FNO_darcy.py	/^import torch$/;"	i
torch	neuraloperator/examples/plot_FNO_darcy.py	/^import torch$/;"	i
torch	neuraloperator/examples/plot_SFNO_swe.py	/^import torch$/;"	i
torch	neuraloperator/examples/plot_UNO_darcy.py	/^import torch$/;"	i
torch	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/burgers.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/darcy.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/data_transforms.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/hdf5_dataset.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/navier_stokes.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/output_encoder.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/pt_dataset.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/spherical_swe.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/tests/test_data_processor.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/tests/test_output_encoder.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/transforms.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/datasets/zarr_dataset.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/einsum_utils.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/embeddings.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/embeddings.py	/^import torch.nn as nn$/;"	i
torch	neuraloperator/neuralop/layers/fno_block.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/fno_block.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/layers/fourier_continuation.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/fourier_continuation.py	/^import torch.nn as nn$/;"	i
torch	neuraloperator/neuralop/layers/integral_transform.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/integral_transform.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/mlp.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/mlp.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/layers/neighbor_search.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/normalization_layers.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/normalization_layers.py	/^import torch.nn as nn$/;"	i
torch	neuraloperator/neuralop/layers/resample.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/resample.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/layers/segment_csr.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/simple_neighbor_search.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/skip_connections.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/spectral_convolution.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/spherical_convolution.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_attention_layer.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_fno_block.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_legacy_spectral_convolution.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_neighbor_search.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_padding.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_resample.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_spectral_convolution.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/layers/tests/test_spherical_convolution.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/losses/data_losses.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/losses/equation_losses.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/losses/equation_losses.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/losses/meta_losses.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/base_model.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/fno.py	/^import torch.nn as nn$/;"	i
torch	neuraloperator/neuralop/models/fno.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/models/fnogno.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/fnogno.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/models/tests/test_fno.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/tests/test_fnogno.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/tests/test_uno.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/uno.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/models/uno.py	/^import torch.nn as nn$/;"	i
torch	neuraloperator/neuralop/models/uno.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/mpu/comm.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/mpu/comm.py	/^import torch.distributed as dist$/;"	i
torch	neuraloperator/neuralop/mpu/helpers.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/mpu/helpers.py	/^import torch.distributed as dist$/;"	i
torch	neuraloperator/neuralop/mpu/helpers.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/neuralop/mpu/mappings.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/mpu/mappings.py	/^import torch.distributed as dist$/;"	i
torch	neuraloperator/neuralop/tests/test_model_from_config.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/tests/test_utils.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/training/callbacks.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/training/patching.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/training/tests/test_callbacks.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/training/torch_setup.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/training/trainer.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/training/training_state.py	/^import torch$/;"	i
torch	neuraloperator/neuralop/utils.py	/^import torch$/;"	i
torch	neuraloperator/scripts/hpo/tune_darcy.py	/^import torch$/;"	i
torch	neuraloperator/scripts/test_from_config.py	/^import torch$/;"	i
torch	neuraloperator/scripts/train_burgers.py	/^import torch$/;"	i
torch	neuraloperator/scripts/train_burgers.py	/^import torch.nn.functional as F$/;"	i
torch	neuraloperator/scripts/train_darcy.py	/^import torch$/;"	i
torch	neuraloperator/scripts/train_navier_stokes.py	/^import torch$/;"	i
torch	nn_architecture.py	/^import torch$/;"	i
torch	nn_architecture.py	/^import torch.nn as nn$/;"	i
torch	problems/problem_base.py	/^import torch$/;"	i
torch	problems/problem_darcy.py	/^import torch$/;"	i
torch	problems/problem_darcy_matrix.py	/^import torch$/;"	i
torch	problems/problem_spring.py	/^import torch$/;"	i
torch	solve.py	/^import torch$/;"	i
torch	stochasticsqp.py	/^import torch$/;"	i
torch_scatter	neuraloperator/neuralop/layers/segment_csr.py	/^        import torch_scatter.segment_csr as scatter_segment_csr$/;"	i
total_drag	neuraloperator/neuralop/losses/data_losses.py	/^def total_drag(pressure, wall_shear_stress, vol_elm, $/;"	f
train	neuraloperator/neuralop/training/trainer.py	/^    def train(self, train_loader, test_loaders,$/;"	m	class:Trainer
train_dataset	FNO dataset.py	/^train_dataset = train_loader.dataset$/;"	v
train_dataset	neuraloperator/examples/plot_darcy_flow.py	/^train_dataset = train_loader.dataset$/;"	v
train_db	neuraloperator/neuralop/datasets/darcy.py	/^    train_db = TensorDataset($/;"	v
train_loader	neuraloperator/neuralop/datasets/darcy.py	/^    train_loader = torch.utils.data.DataLoader($/;"	v
train_loader	neuraloperator/scripts/train_darcy.py	/^    train_loader=train_loader,$/;"	v
train_loss	FNO script.py	/^train_loss = h1loss$/;"	v
train_loss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^train_loss = h1loss$/;"	v
train_loss	neuraloperator/examples/plot_FNO_darcy.py	/^train_loss = h1loss$/;"	v
train_loss	neuraloperator/examples/plot_SFNO_swe.py	/^train_loss = l2loss$/;"	v
train_loss	neuraloperator/examples/plot_UNO_darcy.py	/^train_loss = h1loss$/;"	v
train_loss	neuraloperator/scripts/train_burgers.py	/^train_loss = WeightedSumLoss(losses=losses, weights=weights)$/;"	v
train_loss	neuraloperator/scripts/train_darcy.py	/^    train_loss = h1loss$/;"	v
train_loss	neuraloperator/scripts/train_darcy.py	/^    train_loss = l2loss$/;"	v
train_loss	neuraloperator/scripts/train_navier_stokes.py	/^    train_loss = h1loss$/;"	v
train_loss	neuraloperator/scripts/train_navier_stokes.py	/^    train_loss = l2loss$/;"	v
train_resolution	neuraloperator/neuralop/datasets/darcy.py	/^        train_resolution=16,$/;"	v
train_resolution	neuraloperator/scripts/train_navier_stokes.py	/^    train_resolution=config.data.train_resolution,$/;"	v
train_sample	FNO dataset.py	/^train_sample = train_dataset[0]  ##single sample$/;"	v
trainer	FNO script.py	/^trainer = Trainer(model=model, n_epochs=2,$/;"	v
trainer	neuraloperator/examples/checkpoint_FNO_darcy.py	/^trainer = Trainer(model=model, n_epochs=20,$/;"	v
trainer	neuraloperator/examples/plot_FNO_darcy.py	/^trainer = Trainer(model=model, n_epochs=20,$/;"	v
trainer	neuraloperator/examples/plot_SFNO_swe.py	/^trainer = Trainer(model=model, n_epochs=20,$/;"	v
trainer	neuraloperator/examples/plot_UNO_darcy.py	/^trainer = Trainer(model=model,$/;"	v
trainer	neuraloperator/scripts/train_burgers.py	/^trainer = Trainer($/;"	v
trainer	neuraloperator/scripts/train_darcy.py	/^trainer = Trainer($/;"	v
trainer	neuraloperator/scripts/train_navier_stokes.py	/^trainer = Trainer($/;"	v
training_loss	FNO script.py	/^              training_loss=train_loss,$/;"	v
training_loss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^              training_loss=train_loss)$/;"	v
training_loss	neuraloperator/examples/checkpoint_FNO_darcy.py	/^              training_loss=train_loss)/;"	v
training_loss	neuraloperator/examples/plot_FNO_darcy.py	/^              training_loss=train_loss,$/;"	v
training_loss	neuraloperator/examples/plot_SFNO_swe.py	/^              training_loss=train_loss,$/;"	v
training_loss	neuraloperator/examples/plot_UNO_darcy.py	/^              training_loss=train_loss,$/;"	v
training_loss	neuraloperator/scripts/train_burgers.py	/^    training_loss = [training_loss]$/;"	v
training_loss	neuraloperator/scripts/train_burgers.py	/^    training_loss=train_loss,$/;"	v
training_loss	neuraloperator/scripts/train_burgers.py	/^training_loss = config.opt.training_loss$/;"	v
training_loss	neuraloperator/scripts/train_darcy.py	/^    training_loss=train_loss,$/;"	v
training_loss	neuraloperator/scripts/train_navier_stokes.py	/^    training_loss=train_loss,$/;"	v
transform	neuraloperator/neuralop/datasets/output_encoder.py	/^    def transform(self, tensor_dict):$/;"	m	class:DictTransform
transform	neuraloperator/neuralop/datasets/output_encoder.py	/^    def transform(self, x):$/;"	m	class:UnitGaussianNormalizer
transform	neuraloperator/neuralop/datasets/transforms.py	/^    def transform(self):$/;"	m	class:Transform
transform	neuraloperator/neuralop/datasets/transforms.py	/^    def transform(self, data_dict):$/;"	m	class:Composite
transform	neuraloperator/neuralop/datasets/transforms.py	/^    def transform(self, data_dict):$/;"	m	class:MGPatchingTransform
transform	neuraloperator/neuralop/layers/base_spectral_conv.py	/^    def transform(self, x):$/;"	m	class:BaseSpectralConv
transform	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def transform(self, x, **kwargs):$/;"	m	class:SubConv
transform	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def transform(self, x, layer_index=0, output_shape=None):$/;"	m	class:SpectralConv
transform	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def transform(self, x, **kwargs):$/;"	m	class:SubConv
transform	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def transform(self, x, layer_index=0, output_shape=None):$/;"	m	class:SpectralConv
transform	neuraloperator/neuralop/layers/spherical_convolution.py	/^    def transform(self, x, layer_index=0, output_shape=None):$/;"	m	class:SphericalConv
truncate_helper	neuraloperator/neuralop/mpu/helpers.py	/^def truncate_helper(tensor, dim, new_size):$/;"	f
truth_sp	neuraloperator/examples/plot_darcy_flow_spectrum.py	/^truth_sp = spectrum_2d(dataset_pred.reshape(samples * batchsize, s, s), s)$/;"	v
types	neuraloperator/neuralop/mpu/mappings.py	/^import types$/;"	i
uniform_h	neuraloperator/neuralop/losses/data_losses.py	/^    def uniform_h(self, x):$/;"	m	class:H1Loss
uniform_h	neuraloperator/neuralop/losses/data_losses.py	/^    def uniform_h(self, x):$/;"	m	class:LpLoss
unpad	neuraloperator/neuralop/layers/padding.py	/^    def unpad(self, x):$/;"	m	class:DomainPadding
unpatch	neuraloperator/neuralop/training/patching.py	/^    def unpatch(self, x, y, evaluation=False):$/;"	m	class:MultigridPatching2D
update_mean_std	neuraloperator/neuralop/datasets/output_encoder.py	/^    def update_mean_std(self, data_batch):$/;"	m	class:UnitGaussianNormalizer
use_distributed	FNO script.py	/^                  use_distributed=False,$/;"	v
use_distributed	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  use_distributed=False,$/;"	v
use_distributed	neuraloperator/examples/plot_FNO_darcy.py	/^                  use_distributed=False,$/;"	v
use_distributed	neuraloperator/examples/plot_SFNO_swe.py	/^                  use_distributed=False,$/;"	v
use_distributed	neuraloperator/examples/plot_UNO_darcy.py	/^                  use_distributed=False,$/;"	v
use_distributed	neuraloperator/scripts/train_burgers.py	/^    use_distributed=config.distributed.use_distributed,$/;"	v
use_distributed	neuraloperator/scripts/train_darcy.py	/^    use_distributed=config.distributed.use_distributed,$/;"	v
use_distributed	neuraloperator/scripts/train_navier_stokes.py	/^    use_distributed=config.distributed.use_distributed,$/;"	v
use_opt_einsum	neuraloperator/neuralop/layers/einsum_utils.py	/^from tensorly.plugins import use_opt_einsum$/;"	i
use_opt_einsum	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from tensorly.plugins import use_opt_einsum$/;"	i
use_opt_einsum	neuraloperator/neuralop/layers/spectral_convolution.py	/^from tensorly.plugins import use_opt_einsum$/;"	i
use_opt_einsum	neuraloperator/neuralop/layers/spherical_convolution.py	/^from tensorly.plugins import use_opt_einsum$/;"	i
util	solve.py	/^import importlib.util$/;"	i
validate_scaling_factor	neuraloperator/neuralop/layers/fno_block.py	/^from ..utils import validate_scaling_factor$/;"	i
validate_scaling_factor	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^from ..utils import validate_scaling_factor$/;"	i
validate_scaling_factor	neuraloperator/neuralop/layers/padding.py	/^from neuralop.utils import validate_scaling_factor$/;"	i
validate_scaling_factor	neuraloperator/neuralop/layers/spectral_convolution.py	/^from ..utils import validate_scaling_factor$/;"	i
validate_scaling_factor	neuraloperator/neuralop/layers/spherical_convolution.py	/^from neuralop.utils import validate_scaling_factor$/;"	i
validate_scaling_factor	neuraloperator/neuralop/utils.py	/^def validate_scaling_factor($/;"	f
variables	Test file.py	/^variables = torch.cat((a,b), dim=1)$/;"	v
verbose	FNO script.py	/^                  verbose=True)$/;"	v
verbose	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  verbose=True)$/;"	v
verbose	neuraloperator/examples/plot_FNO_darcy.py	/^                  verbose=True)$/;"	v
verbose	neuraloperator/examples/plot_SFNO_swe.py	/^                  verbose=True)$/;"	v
verbose	neuraloperator/examples/plot_UNO_darcy.py	/^                  verbose=True)$/;"	v
verbose	neuraloperator/scripts/train_burgers.py	/^    verbose=config.verbose,$/;"	v
verbose	neuraloperator/scripts/train_darcy.py	/^    verbose=config.verbose and is_logger,$/;"	v
verbose	neuraloperator/scripts/train_navier_stokes.py	/^    verbose=config.verbose,$/;"	v
version	neuraloperator/setup.py	/^def version(root_path):$/;"	f
wandb	neuraloperator/neuralop/tests/test_utils.py	/^import wandb$/;"	i
wandb	neuraloperator/neuralop/training/callbacks.py	/^import wandb$/;"	i
wandb	neuraloperator/neuralop/utils.py	/^import wandb$/;"	i
wandb	neuraloperator/scripts/hpo/tune_darcy.py	/^import wandb$/;"	i
wandb	neuraloperator/scripts/train_burgers.py	/^import wandb$/;"	i
wandb	neuraloperator/scripts/train_darcy.py	/^import wandb$/;"	i
wandb	neuraloperator/scripts/train_navier_stokes.py	/^import wandb$/;"	i
wandb_args	neuraloperator/scripts/train_darcy.py	/^    wandb_args =  dict($/;"	v
wandb_args	neuraloperator/scripts/train_darcy.py	/^wandb_args = None$/;"	v
wandb_init_args	neuraloperator/scripts/train_burgers.py	/^    wandb_init_args = None$/;"	v
wandb_init_args	neuraloperator/scripts/train_burgers.py	/^    wandb_init_args = dict($/;"	v
wandb_init_args	neuraloperator/scripts/train_navier_stokes.py	/^    wandb_init_args = dict($/;"	v
wandb_init_args	neuraloperator/scripts/train_navier_stokes.py	/^wandb_init_args = None$/;"	v
wandb_log	FNO script.py	/^                  wandb_log=False,$/;"	v
wandb_log	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                  wandb_log=False,$/;"	v
wandb_log	neuraloperator/examples/plot_FNO_darcy.py	/^                  wandb_log=False,$/;"	v
wandb_log	neuraloperator/examples/plot_SFNO_swe.py	/^                  wandb_log=False,$/;"	v
wandb_log	neuraloperator/examples/plot_UNO_darcy.py	/^                  wandb_log=False,$/;"	v
wandb_log	neuraloperator/scripts/train_burgers.py	/^    wandb_log = config.wandb.log$/;"	v
wandb_log	neuraloperator/scripts/train_darcy.py	/^    wandb_log=config.wandb.log,$/;"	v
wandb_log	neuraloperator/scripts/train_navier_stokes.py	/^    wandb_log = config.wandb.log$/;"	v
wandb_login	neuraloperator/neuralop/tests/test_utils.py	/^from ..utils import get_wandb_api_key, wandb_login$/;"	i
wandb_login	neuraloperator/neuralop/utils.py	/^def wandb_login(api_key_file="..\/config\/wandb_api_key.txt", key=None):$/;"	f
wandb_login	neuraloperator/scripts/login_wandb.py	/^from neuralop.utils import wandb_login$/;"	i
wandb_name	neuraloperator/scripts/hpo/tune_darcy.py	/^        wandb_name = "_".join($/;"	v
wandb_name	neuraloperator/scripts/hpo/tune_darcy.py	/^        wandb_name = config.wandb.name$/;"	v
wandb_name	neuraloperator/scripts/train_burgers.py	/^        wandb_name = "_".join($/;"	v
wandb_name	neuraloperator/scripts/train_burgers.py	/^        wandb_name = config.wandb.name$/;"	v
wandb_name	neuraloperator/scripts/train_darcy.py	/^        wandb_name = "_".join($/;"	v
wandb_name	neuraloperator/scripts/train_darcy.py	/^        wandb_name = config.wandb.name$/;"	v
wandb_name	neuraloperator/scripts/train_navier_stokes.py	/^        wandb_name = "_".join($/;"	v
wandb_name	neuraloperator/scripts/train_navier_stokes.py	/^        wandb_name = config.wandb.name$/;"	v
warnings	neuraloperator/neuralop/models/base_model.py	/^import warnings$/;"	i
warnings	neuraloperator/neuralop/utils.py	/^import warnings$/;"	i
weight	neuraloperator/neuralop/layers/legacy_spectral_convolution.py	/^    def weight(self):$/;"	m	class:SubConv
weight	neuraloperator/neuralop/layers/spectral_convolution.py	/^    def weight(self):$/;"	m	class:SubConv
weight_decay	FNO script.py	/^                                weight_decay=1e-4)$/;"	v
weight_decay	neuraloperator/examples/checkpoint_FNO_darcy.py	/^                                weight_decay=1e-4)$/;"	v
weight_decay	neuraloperator/examples/plot_FNO_darcy.py	/^                                weight_decay=1e-4)$/;"	v
weight_decay	neuraloperator/examples/plot_SFNO_swe.py	/^                                weight_decay=0.0)$/;"	v
weight_decay	neuraloperator/examples/plot_UNO_darcy.py	/^                                weight_decay=1e-4)$/;"	v
weight_decay	neuraloperator/scripts/train_burgers.py	/^    weight_decay=config.opt.weight_decay,$/;"	v
weight_decay	neuraloperator/scripts/train_darcy.py	/^    weight_decay=config.opt.weight_decay,$/;"	v
weight_decay	neuraloperator/scripts/train_navier_stokes.py	/^    weight_decay=config.opt.weight_decay,$/;"	v
weights	neuraloperator/scripts/train_burgers.py	/^weights = []$/;"	v
wrap	neuraloperator/neuralop/datasets/data_transforms.py	/^    def wrap(self, model):$/;"	m	class:DefaultDataProcessor
wrap	neuraloperator/neuralop/datasets/data_transforms.py	/^    def wrap(self, model):$/;"	m	class:MGPatchingDataProcessor
x	FNO script.py	/^    x = data['x']$/;"	v
x	neuraloperator/examples/plot_FNO_darcy.py	/^    x = data['x']$/;"	v
x	neuraloperator/examples/plot_SFNO_swe.py	/^    x = data['x']$/;"	v
x	neuraloperator/examples/plot_SFNO_swe.py	/^    x = x[0, ...].detach().numpy()$/;"	v
x	neuraloperator/examples/plot_UNO_darcy.py	/^    x = data['x']$/;"	v
x	neuraloperator/examples/plot_darcy_flow.py	/^    x = batch['x']$/;"	v
x	neuraloperator/examples/plot_darcy_flow.py	/^x = data['x']$/;"	v
x_in	neuraloperator/examples/plot_SFNO_swe.py	/^    x_in = x.unsqueeze(0).to(device)$/;"	v
x_test	neuraloperator/neuralop/datasets/darcy.py	/^        x_test = ($/;"	v
x_test	neuraloperator/neuralop/datasets/darcy.py	/^    x_test = data["x"][:n_test, :, :].unsqueeze(channel_dim).type(torch.float32).clone()$/;"	v
x_train	neuraloperator/neuralop/datasets/darcy.py	/^    x_train = ($/;"	v
xavier_uniform_	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^from torch.nn.init import xavier_uniform_, zeros_$/;"	i
y	FNO script.py	/^    y = data['y']$/;"	v
y	neuraloperator/examples/plot_FNO_darcy.py	/^    y = data['y']$/;"	v
y	neuraloperator/examples/plot_SFNO_swe.py	/^    y = data['y'][0, ...].numpy()$/;"	v
y	neuraloperator/examples/plot_UNO_darcy.py	/^    y = data['y']$/;"	v
y	neuraloperator/examples/plot_darcy_flow.py	/^    y = batch['y']$/;"	v
y	neuraloperator/examples/plot_darcy_flow.py	/^y = data['y']$/;"	v
y_test	neuraloperator/neuralop/datasets/darcy.py	/^        y_test = data["y"][:n_test, :, :].unsqueeze(channel_dim).clone()$/;"	v
y_test	neuraloperator/neuralop/datasets/darcy.py	/^    y_test = data["y"][:n_test, :, :].unsqueeze(channel_dim).clone()$/;"	v
y_train	neuraloperator/neuralop/datasets/darcy.py	/^    y_train = data["y"][0:n_train, :, :].unsqueeze(channel_dim).clone()$/;"	v
year	neuraloperator/doc/source/conf.py	/^year = datetime.now().year$/;"	v
zarr	neuraloperator/neuralop/datasets/zarr_dataset.py	/^import zarr$/;"	i
zeros_	neuraloperator/neuralop/layers/attention_kernel_integral.py	/^from torch.nn.init import xavier_uniform_, zeros_$/;"	i
