output_folder: ./results        # Main output folder. All the outputs (log, plots, models) will be saved to this folder
sub_folders:                    # Subfolder names for model, plot, and log                  
  model : mdl
  plot  : plot
  log   : log
  
file_suffix: test               # str, all the leaf output file name will contain this suffix
maxiter: 10000                  # Total number of epochs
save_model_every: 100           # Save models and logs per [such] iterations
save_plot_every: 200           # Save plots per [such] iterations, maxiter / save_plot_every better not exceed 500
stdout : 1                      # 0: print to screen, 1: print to log file

problem:                        # Parameters for problem
  name  : Burgersinf
  regs:                           # regularization multipliers of different losses composing objective function
    pde     : 1.0e-3
    boundary: 1.0e-3
    fitting : 1
  n_constrs: 10                   # number of constraints ---
  constraint_type : pde       # pde, or boundary
  batch_size: 0.5            # str full or int batch_size #TODO
  nn_name       : FCN           # neural network name. This should be a class in nn_architecture.py
  nn_input      : 2             # x, t the x_discretization will be added
  nn_output     : 1
  nn_parameters:                # The keys can be different for different neural network
    n_hidden: 64
    n_layers: 3
  t_max: 1                      # null or int. Largest time.
  t_discretization: 32         # null or int. discretization of time
  dim_x: 1                      # int. dimension of domain
  x_max: 1                   # null or list of largest x of number dim_x
  x_discretization: 32        # null or list of discretization x of number dim_x
  n_group_pde_parameters: 100     # int. number of group of pde parameters
  n_obj_sample_fitting_per_group: 64 # number of samples of different losses composing objective function
  n_group_pde_parameters_test: 3     # int. number of group of pde parameters

  
optimizer:
  name : sqp                  # adam or sgd or sqp 
  lr    : 1.0e-3
  mu    : 1.0e-7
  beta2 : 0.999
  pretrain: null              # null; or dict with keys: epoch_start and file_suffix
  alpha_type: c_adam
  beta1: 0.9
      