!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABC	problems/problem_base.py	/^from abc import ABC, abstractmethod$/;"	i
BaseProblem	problems/problem_base.py	/^class BaseProblem(ABC):$/;"	c
BaseProblem	problems/problem_burgers.py	/^from problems.problem_base import BaseProblem$/;"	i
BaseProblem	problems/problem_chemistry.py	/^from problems.problem_base import BaseProblem$/;"	i
BaseProblem	problems/problem_darcy.py	/^from .problem_base import BaseProblem$/;"	i
BaseProblem	problems/problem_spring.py	/^from .problem_base import BaseProblem$/;"	i
Burgers	problems/problem_burgers.py	/^class Burgers(BaseProblem):$/;"	c
Burgers	solve.py	/^from problems.problem_burgers import Burgers$/;"	i
Chemistry	problems/problem_chemistry.py	/^class Chemistry(BaseProblem):$/;"	c
Chemistry	solve.py	/^from problems.problem_chemistry import Chemistry$/;"	i
DEVICE	solve.py	/^DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
Darcy	problems/problem_darcy.py	/^class Darcy(BaseProblem):$/;"	c
Darcy	solve.py	/^from problems.problem_darcy import Darcy$/;"	i
FCN	nn_architecture.py	/^class FCN(nn.Module):$/;"	c
FNO	nn_architecture.py	/^from neuralop.models import FNO$/;"	i
FNOLocal	nn_architecture.py	/^class FNOLocal(nn.Module):$/;"	c
IN_COLAB	run.py	/^      IN_COLAB = False$/;"	v
IN_COLAB	run.py	/^      IN_COLAB = True$/;"	v
Image	problems/problem_base.py	/^from PIL import Image$/;"	i
Optimizer	stochasticsqp.py	/^from torch.optim.optimizer import Optimizer, required$/;"	i
Spring	problems/problem_spring.py	/^class Spring(BaseProblem):$/;"	c
Spring	solve.py	/^from problems.problem_spring import Spring$/;"	i
StochasticSQP	stochasticsqp.py	/^class StochasticSQP(Optimizer):$/;"	c
__init__	nn_architecture.py	/^    def __init__(self, N_INPUT, N_OUTPUT, N_HIDDEN, N_LAYERS,is_darcy=False):$/;"	m	class:FCN
__init__	nn_architecture.py	/^    def __init__(self, n_discretize=16, hidden_channels=16):$/;"	m	class:FNOLocal
__init__	problems/problem_base.py	/^    def __init__(self):$/;"	m	class:BaseProblem
__init__	problems/problem_burgers.py	/^    def __init__(self, device, conf):$/;"	m	class:Burgers
__init__	problems/problem_chemistry.py	/^    def __init__(self, device, conf):$/;"	m	class:Chemistry
__init__	problems/problem_darcy.py	/^    def __init__(self, device, conf):$/;"	m	class:Darcy
__init__	problems/problem_spring.py	/^    def __init__(self, device, conf):$/;"	m	class:Spring
__init__	stochasticsqp.py	/^    def __init__(self, params, lr=required, $/;"	m	class:StochasticSQP
__setstate__	stochasticsqp.py	/^    def __setstate__(self, state):$/;"	m	class:StochasticSQP	file:
abstractmethod	problems/problem_base.py	/^from abc import ABC, abstractmethod$/;"	i
batch_seeds	run.py	/^batch_seeds = {$/;"	v
burg_system	problems/problem_burgers.py	/^        def burg_system(u,t,k,mu,nu):$/;"	f	function:Burgers.true_burgers_solution
check_gradient	utils.py	/^def check_gradient(optimizer, problem):$/;"	f
colab	run.py	/^      import google.colab$/;"	i
conf_name	solve.py	/^    conf_name = sys.argv[1] $/;"	v
config	solve.py	/^        config = yaml.load(f, Loader=yaml.FullLoader)$/;"	v
constraint_func	problems/problem_base.py	/^    def constraint_func(self):$/;"	m	class:BaseProblem
constraint_func	problems/problem_burgers.py	/^    def constraint_func(self):$/;"	m	class:Burgers
constraint_func	problems/problem_chemistry.py	/^    def constraint_func(self):$/;"	m	class:Chemistry
constraint_func	problems/problem_darcy.py	/^    def constraint_func(self):$/;"	m	class:Darcy
constraint_func	problems/problem_spring.py	/^    def constraint_func(self):$/;"	m	class:Spring
constraint_func_and_grad	problems/problem_base.py	/^    def constraint_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:BaseProblem
count_parameters	problems/problem_base.py	/^    def count_parameters(self, nn_net):$/;"	m	class:BaseProblem
create_dataset	problems/problem_chemistry.py	/^    def create_dataset(self, number_of_initial_cond, n_discretization = 100, save_name = None):$/;"	m	class:Chemistry
create_dir	run.py	/^from utils import create_dir$/;"	i
create_dir	solve.py	/^from utils import create_dir$/;"	i
create_dir	utils.py	/^def create_dir(dir):$/;"	f
create_output_folders	solve.py	/^def create_output_folders(output_folder, sub_folders, problem_name):$/;"	f
d	problems/problem_spring.py	/^    d = 2$/;"	v	class:Spring
debug	run.py	/^debug = False                                             # True or False. If it is True, then only a few epochs will be run.$/;"	v
eps_singular_matrix	stochasticsqp.py	/^    eps_singular_matrix = 1 # parameter for modifying matrix to be nonsingular$/;"	v	class:StochasticSQP
epsilon	stochasticsqp.py	/^    epsilon=1e-6            # parameter for computing merit parameter$/;"	v	class:StochasticSQP
f	problems/problem_darcy.py	/^    f = 1$/;"	v	class:Darcy
figsize	problems/problem_base.py	/^    figsize=(4.2, 3.2) $/;"	v	class:BaseProblem
figsize_rectangle	problems/problem_base.py	/^    figsize_rectangle =(4.2, 2.2)$/;"	v	class:BaseProblem
figsize_square	problems/problem_base.py	/^    figsize_square =(2.2, 2.2)$/;"	v	class:BaseProblem
find_header_row_number	run.py	/^def find_header_row_number(file, first_header):$/;"	f
forward	nn_architecture.py	/^    def forward(self, inputs):$/;"	m	class:FNOLocal
forward	nn_architecture.py	/^    def forward(self, x):$/;"	m	class:FCN
generate_one_group	problems/problem_burgers.py	/^    def generate_one_group(self, xs, ts, device):$/;"	m	class:Burgers
generate_sample	problems/problem_base.py	/^    def generate_sample(self):$/;"	m	class:BaseProblem
generate_sample	problems/problem_burgers.py	/^    def generate_sample(self,device):$/;"	m	class:Burgers
generate_sample	problems/problem_chemistry.py	/^    def generate_sample(self,device):$/;"	m	class:Chemistry
generate_sample	problems/problem_darcy.py	/^    def generate_sample(self, device):$/;"	m	class:Darcy
generate_sample	problems/problem_spring.py	/^    def generate_sample(self):$/;"	m	class:Spring
get_gif_path	solve.py	/^def get_gif_path(folders, suffix):$/;"	f
get_mdl_path	solve.py	/^def get_mdl_path(folders, epoch, suffix):$/;"	f
get_optim_path	solve.py	/^def get_optim_path(folders, epoch, suffix):$/;"	f
get_plot_path	solve.py	/^def get_plot_path(folders, epoch, suffix):$/;"	f
get_x	utils.py	/^def get_x(problem):$/;"	f
google	run.py	/^      import google.colab$/;"	i
initial_function	problems/problem_burgers.py	/^    def initial_function(self, xs, initial_rand_phase):$/;"	m	class:Burgers
kinetic_kosir_gen	problems/problem_chemistry.py	/^        def kinetic_kosir_gen(x, t) -> np.ndarray:$/;"	f	function:Chemistry.create_dataset
load_darcy_flow_small	problems/problem_darcy.py	/^from neuralop.datasets import load_darcy_flow_small$/;"	i
load_net	problems/problem_base.py	/^    def load_net(self,path,device):$/;"	m	class:BaseProblem
load_pretrain_state	stochasticsqp.py	/^    def load_pretrain_state(self,optim_path,device):$/;"	m	class:StochasticSQP
lrs	run.py	/^lrs = {$/;"	v
main	run.py	/^def main():$/;"	f
matplotlib	problems/problem_burgers.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	problems/problem_chemistry.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	problems/problem_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	problems/problem_spring.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	run.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	utils.py	/^import matplotlib.pyplot as plt$/;"	i
mu	problems/problem_burgers.py	/^    mu = 1    $/;"	v	class:Burgers
name	problems/problem_burgers.py	/^    name = 'Burgers'$/;"	v	class:Burgers
name	problems/problem_chemistry.py	/^    name = 'Chemistry'$/;"	v	class:Chemistry
name	problems/problem_darcy.py	/^    name = 'Darcy'$/;"	v	class:Darcy
name	problems/problem_spring.py	/^    name = "Spring"$/;"	v	class:Spring
nn	nn_architecture.py	/^import torch.nn as nn$/;"	i
noise_level	problems/problem_chemistry.py	/^    noise_level = 1$/;"	v	class:Chemistry
np	problems/problem_burgers.py	/^import numpy as np$/;"	i
np	problems/problem_chemistry.py	/^import numpy as np$/;"	i
np	problems/problem_spring.py	/^import numpy as np$/;"	i
np	run.py	/^import numpy as np$/;"	i
np	solve.py	/^import numpy as np$/;"	i
nu	problems/problem_burgers.py	/^    nu = 0.01   ##kinematic viscosity coefficient$/;"	v	class:Burgers
objective_func	problems/problem_base.py	/^    def objective_func(self):$/;"	m	class:BaseProblem
objective_func	problems/problem_burgers.py	/^    def objective_func(self):$/;"	m	class:Burgers
objective_func	problems/problem_chemistry.py	/^    def objective_func(self):$/;"	m	class:Chemistry
objective_func	problems/problem_darcy.py	/^    def objective_func(self):$/;"	m	class:Darcy
objective_func	problems/problem_spring.py	/^    def objective_func(self):$/;"	m	class:Spring
objective_func_and_grad	problems/problem_base.py	/^    def objective_func_and_grad(self, optimizer, no_grad = False):$/;"	m	class:BaseProblem
odeint	problems/problem_burgers.py	/^from scipy.integrate import odeint$/;"	i
odeint	problems/problem_chemistry.py	/^from scipy.integrate import odeint$/;"	i
os	problems/problem_chemistry.py	/^import os$/;"	i
os	run.py	/^import os$/;"	i
os	utils.py	/^import os$/;"	i
oscillator	problems/problem_spring.py	/^def oscillator(d, w0, x):$/;"	f
output_folder	run.py	/^output_folder = 'results'                                 # Output folder, under current directory$/;"	v
pd	run.py	/^import pandas as pd$/;"	i
pde	problems/problem_burgers.py	/^    def pde(self, output, x_pde, t_pde):$/;"	m	class:Burgers
pde	problems/problem_chemistry.py	/^    def pde(self, output, t):$/;"	m	class:Chemistry
pde	problems/problem_darcy.py	/^    def pde(self, nu, x1, x2, out):$/;"	m	class:Darcy
pde	problems/problem_spring.py	/^    def pde(self, u_pde_pred, t_pde):$/;"	m	class:Spring
plot	run.py	/^plot = True                                               # Generate plots of losses over epochs using results from `output_folder`. The generated plots will be saved under `output_folder\/loss_plots`$/;"	v
plot	utils.py	/^def plot(u_true, u_pred, t, save_file_name):$/;"	f
plot_batch_settings	run.py	/^plot_batch_settings =['mini-batch', 'full batch']$/;"	v
plot_f	run.py	/^def plot_f(problem):$/;"	f
plot_gif	solve.py	/^def plot_gif(folders, problem, config, files):$/;"	f
plot_prediction	problems/problem_burgers.py	/^    def plot_prediction(self,save_label=False,save_path=None,epoch=0):$/;"	m	class:Burgers
plot_prediction	problems/problem_chemistry.py	/^    def plot_prediction(self, save_path = None, epoch = None, save_label = False):$/;"	m	class:Chemistry
plot_prediction	problems/problem_darcy.py	/^    def plot_prediction(self, save_path=None, epoch=None, save_label=False):$/;"	m	class:Darcy
plot_prediction	problems/problem_spring.py	/^    def plot_prediction(self,save_path, epoch):$/;"	m	class:Spring
plot_prediction	solve.py	/^def plot_prediction(folders, epoch, problem, config):$/;"	f
plt	problems/problem_burgers.py	/^import matplotlib.pyplot as plt$/;"	i
plt	problems/problem_chemistry.py	/^import matplotlib.pyplot as plt$/;"	i
plt	problems/problem_darcy.py	/^import matplotlib.pyplot as plt$/;"	i
plt	problems/problem_spring.py	/^import matplotlib.pyplot as plt$/;"	i
plt	run.py	/^import matplotlib.pyplot as plt$/;"	i
plt	utils.py	/^import matplotlib.pyplot as plt$/;"	i
printRow	solve.py	/^def printRow(log_f, type='header', headers=[],values={}):$/;"	f
printerBeginningSummary	solve.py	/^def printerBeginningSummary(config, log_f):$/;"	f
problems	run.py	/^problems = ['spring', 'chemistry', 'burgers', 'darcy']    # list of problems$/;"	v
random	problems/problem_chemistry.py	/^import random$/;"	i
required	stochasticsqp.py	/^from torch.optim.optimizer import Optimizer, required$/;"	i
run	run.py	/^from solve import run $/;"	i
run	solve.py	/^def run(config):$/;"	f
save_gif_PIL	problems/problem_base.py	/^    def save_gif_PIL(self, outfile, files, fps=5, loop=0):$/;"	m	class:BaseProblem
save_model	solve.py	/^def save_model(folders, epoch, problem, optimizer, config):$/;"	f
save_net	problems/problem_base.py	/^    def save_net(self,path):$/;"	m	class:BaseProblem
save_pretrain_state	stochasticsqp.py	/^    def save_pretrain_state(self,optim_path):$/;"	m	class:StochasticSQP
set_boundary_and_interior_pixel_idx	problems/problem_darcy.py	/^    def set_boundary_and_interior_pixel_idx(self):$/;"	m	class:Darcy
set_constraint_pixel_idx	problems/problem_darcy.py	/^    def set_constraint_pixel_idx(self):$/;"	m	class:Darcy
set_torch_random_seed	problems/problem_base.py	/^    def set_torch_random_seed(self, seed):$/;"	m	class:BaseProblem
settings	run.py	/^settings = {                                              $/;"	v
sigma	stochasticsqp.py	/^    sigma=0.5               # parameter for computing merit parameter$/;"	v	class:StochasticSQP
solve_linsys	stochasticsqp.py	/^    def solve_linsys(self, A,b, i = 0):$/;"	m	class:StochasticSQP
step	stochasticsqp.py	/^    def step(self, closure=None):$/;"	m	class:StochasticSQP
sys	solve.py	/^import sys$/;"	i
time	solve.py	/^import time$/;"	i
torch	nn_architecture.py	/^import torch.nn as nn$/;"	i
torch	problems/problem_base.py	/^import torch$/;"	i
torch	problems/problem_burgers.py	/^import torch$/;"	i
torch	problems/problem_chemistry.py	/^import torch$/;"	i
torch	problems/problem_darcy.py	/^import torch$/;"	i
torch	problems/problem_spring.py	/^import torch$/;"	i
torch	solve.py	/^import torch$/;"	i
torch	stochasticsqp.py	/^import torch$/;"	i
torch	utils.py	/^import torch$/;"	i
train	run.py	/^train = True                                             # True or False. If it is True, then the model will be trained and produce output and saved$/;"	v
true_burgers_solution	problems/problem_burgers.py	/^    def true_burgers_solution(self, xs, ts, u0):$/;"	m	class:Burgers
w0	problems/problem_spring.py	/^    w0 = 20$/;"	v	class:Spring
yaml	run.py	/^import yaml$/;"	i
yaml	solve.py	/^import yaml$/;"	i
